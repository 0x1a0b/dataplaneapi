// Code generated by go-swagger; DO NOT EDIT.

package stick_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetStickRequestRuleOKCode is the HTTP code returned for type GetStickRequestRuleOK
const GetStickRequestRuleOKCode int = 200

/*GetStickRequestRuleOK Successful operation

swagger:response getStickRequestRuleOK
*/
type GetStickRequestRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetStickRequestRuleOKBody `json:"body,omitempty"`
}

// NewGetStickRequestRuleOK creates GetStickRequestRuleOK with default headers values
func NewGetStickRequestRuleOK() *GetStickRequestRuleOK {

	return &GetStickRequestRuleOK{}
}

// WithPayload adds the payload to the get stick request rule o k response
func (o *GetStickRequestRuleOK) WithPayload(payload *models.GetStickRequestRuleOKBody) *GetStickRequestRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get stick request rule o k response
func (o *GetStickRequestRuleOK) SetPayload(payload *models.GetStickRequestRuleOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStickRequestRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetStickRequestRuleNotFoundCode is the HTTP code returned for type GetStickRequestRuleNotFound
const GetStickRequestRuleNotFoundCode int = 404

/*GetStickRequestRuleNotFound The specified resource was not found

swagger:response getStickRequestRuleNotFound
*/
type GetStickRequestRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetStickRequestRuleNotFound creates GetStickRequestRuleNotFound with default headers values
func NewGetStickRequestRuleNotFound() *GetStickRequestRuleNotFound {

	return &GetStickRequestRuleNotFound{}
}

// WithPayload adds the payload to the get stick request rule not found response
func (o *GetStickRequestRuleNotFound) WithPayload(payload *models.Error) *GetStickRequestRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get stick request rule not found response
func (o *GetStickRequestRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStickRequestRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetStickRequestRuleDefault General Error

swagger:response getStickRequestRuleDefault
*/
type GetStickRequestRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetStickRequestRuleDefault creates GetStickRequestRuleDefault with default headers values
func NewGetStickRequestRuleDefault(code int) *GetStickRequestRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &GetStickRequestRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get stick request rule default response
func (o *GetStickRequestRuleDefault) WithStatusCode(code int) *GetStickRequestRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get stick request rule default response
func (o *GetStickRequestRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get stick request rule default response
func (o *GetStickRequestRuleDefault) WithPayload(payload *models.Error) *GetStickRequestRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get stick request rule default response
func (o *GetStickRequestRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStickRequestRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
