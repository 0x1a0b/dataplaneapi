// Code generated by go-swagger; DO NOT EDIT.

package stick_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// DeleteStickRequestRuleNoContentCode is the HTTP code returned for type DeleteStickRequestRuleNoContent
const DeleteStickRequestRuleNoContentCode int = 204

/*DeleteStickRequestRuleNoContent Stick Request Rule deleted

swagger:response deleteStickRequestRuleNoContent
*/
type DeleteStickRequestRuleNoContent struct {
}

// NewDeleteStickRequestRuleNoContent creates DeleteStickRequestRuleNoContent with default headers values
func NewDeleteStickRequestRuleNoContent() *DeleteStickRequestRuleNoContent {

	return &DeleteStickRequestRuleNoContent{}
}

// WriteResponse to the client
func (o *DeleteStickRequestRuleNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteStickRequestRuleNotFoundCode is the HTTP code returned for type DeleteStickRequestRuleNotFound
const DeleteStickRequestRuleNotFoundCode int = 404

/*DeleteStickRequestRuleNotFound The specified resource was not found

swagger:response deleteStickRequestRuleNotFound
*/
type DeleteStickRequestRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStickRequestRuleNotFound creates DeleteStickRequestRuleNotFound with default headers values
func NewDeleteStickRequestRuleNotFound() *DeleteStickRequestRuleNotFound {

	return &DeleteStickRequestRuleNotFound{}
}

// WithPayload adds the payload to the delete stick request rule not found response
func (o *DeleteStickRequestRuleNotFound) WithPayload(payload *models.Error) *DeleteStickRequestRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete stick request rule not found response
func (o *DeleteStickRequestRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStickRequestRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteStickRequestRuleDefault General Error

swagger:response deleteStickRequestRuleDefault
*/
type DeleteStickRequestRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStickRequestRuleDefault creates DeleteStickRequestRuleDefault with default headers values
func NewDeleteStickRequestRuleDefault(code int) *DeleteStickRequestRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteStickRequestRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete stick request rule default response
func (o *DeleteStickRequestRuleDefault) WithStatusCode(code int) *DeleteStickRequestRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete stick request rule default response
func (o *DeleteStickRequestRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete stick request rule default response
func (o *DeleteStickRequestRuleDefault) WithPayload(payload *models.Error) *DeleteStickRequestRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete stick request rule default response
func (o *DeleteStickRequestRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStickRequestRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
