// Code generated by go-swagger; DO NOT EDIT.

package http_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetHTTPRequestRuleOKCode is the HTTP code returned for type GetHTTPRequestRuleOK
const GetHTTPRequestRuleOKCode int = 200

/*GetHTTPRequestRuleOK Successful operation

swagger:response getHttpRequestRuleOK
*/
type GetHTTPRequestRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetHTTPRequestRuleOKBody `json:"body,omitempty"`
}

// NewGetHTTPRequestRuleOK creates GetHTTPRequestRuleOK with default headers values
func NewGetHTTPRequestRuleOK() *GetHTTPRequestRuleOK {

	return &GetHTTPRequestRuleOK{}
}

// WithPayload adds the payload to the get Http request rule o k response
func (o *GetHTTPRequestRuleOK) WithPayload(payload *models.GetHTTPRequestRuleOKBody) *GetHTTPRequestRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Http request rule o k response
func (o *GetHTTPRequestRuleOK) SetPayload(payload *models.GetHTTPRequestRuleOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHTTPRequestRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetHTTPRequestRuleNotFoundCode is the HTTP code returned for type GetHTTPRequestRuleNotFound
const GetHTTPRequestRuleNotFoundCode int = 404

/*GetHTTPRequestRuleNotFound The specified resource was not found

swagger:response getHttpRequestRuleNotFound
*/
type GetHTTPRequestRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetHTTPRequestRuleNotFound creates GetHTTPRequestRuleNotFound with default headers values
func NewGetHTTPRequestRuleNotFound() *GetHTTPRequestRuleNotFound {

	return &GetHTTPRequestRuleNotFound{}
}

// WithPayload adds the payload to the get Http request rule not found response
func (o *GetHTTPRequestRuleNotFound) WithPayload(payload *models.Error) *GetHTTPRequestRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Http request rule not found response
func (o *GetHTTPRequestRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHTTPRequestRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetHTTPRequestRuleDefault General Error

swagger:response getHttpRequestRuleDefault
*/
type GetHTTPRequestRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetHTTPRequestRuleDefault creates GetHTTPRequestRuleDefault with default headers values
func NewGetHTTPRequestRuleDefault(code int) *GetHTTPRequestRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &GetHTTPRequestRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get HTTP request rule default response
func (o *GetHTTPRequestRuleDefault) WithStatusCode(code int) *GetHTTPRequestRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get HTTP request rule default response
func (o *GetHTTPRequestRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get HTTP request rule default response
func (o *GetHTTPRequestRuleDefault) WithPayload(payload *models.Error) *GetHTTPRequestRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get HTTP request rule default response
func (o *GetHTTPRequestRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHTTPRequestRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
