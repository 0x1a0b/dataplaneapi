// Code generated by go-swagger; DO NOT EDIT.

package server_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// DeleteServerSwitchingRuleNoContentCode is the HTTP code returned for type DeleteServerSwitchingRuleNoContent
const DeleteServerSwitchingRuleNoContentCode int = 204

/*DeleteServerSwitchingRuleNoContent Server Switching Rule deleted

swagger:response deleteServerSwitchingRuleNoContent
*/
type DeleteServerSwitchingRuleNoContent struct {
}

// NewDeleteServerSwitchingRuleNoContent creates DeleteServerSwitchingRuleNoContent with default headers values
func NewDeleteServerSwitchingRuleNoContent() *DeleteServerSwitchingRuleNoContent {

	return &DeleteServerSwitchingRuleNoContent{}
}

// WriteResponse to the client
func (o *DeleteServerSwitchingRuleNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteServerSwitchingRuleNotFoundCode is the HTTP code returned for type DeleteServerSwitchingRuleNotFound
const DeleteServerSwitchingRuleNotFoundCode int = 404

/*DeleteServerSwitchingRuleNotFound The specified resource was not found

swagger:response deleteServerSwitchingRuleNotFound
*/
type DeleteServerSwitchingRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServerSwitchingRuleNotFound creates DeleteServerSwitchingRuleNotFound with default headers values
func NewDeleteServerSwitchingRuleNotFound() *DeleteServerSwitchingRuleNotFound {

	return &DeleteServerSwitchingRuleNotFound{}
}

// WithPayload adds the payload to the delete server switching rule not found response
func (o *DeleteServerSwitchingRuleNotFound) WithPayload(payload *models.Error) *DeleteServerSwitchingRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete server switching rule not found response
func (o *DeleteServerSwitchingRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServerSwitchingRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteServerSwitchingRuleDefault General Error

swagger:response deleteServerSwitchingRuleDefault
*/
type DeleteServerSwitchingRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServerSwitchingRuleDefault creates DeleteServerSwitchingRuleDefault with default headers values
func NewDeleteServerSwitchingRuleDefault(code int) *DeleteServerSwitchingRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteServerSwitchingRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete server switching rule default response
func (o *DeleteServerSwitchingRuleDefault) WithStatusCode(code int) *DeleteServerSwitchingRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete server switching rule default response
func (o *DeleteServerSwitchingRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete server switching rule default response
func (o *DeleteServerSwitchingRuleDefault) WithPayload(payload *models.Error) *DeleteServerSwitchingRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete server switching rule default response
func (o *DeleteServerSwitchingRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServerSwitchingRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
