// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTransactionsHandlerFunc turns a function with the right signature into a get transactions handler
type GetTransactionsHandlerFunc func(GetTransactionsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionsHandlerFunc) Handle(params GetTransactionsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTransactionsHandler interface for that can handle valid get transactions params
type GetTransactionsHandler interface {
	Handle(GetTransactionsParams, interface{}) middleware.Responder
}

// NewGetTransactions creates a new http.Handler for the get transactions operation
func NewGetTransactions(ctx *middleware.Context, handler GetTransactionsHandler) *GetTransactions {
	return &GetTransactions{Context: ctx, Handler: handler}
}

/*GetTransactions swagger:route GET /services/haproxy/transactions Transactions getTransactions

Return list of HAProxy configuration transactions.

Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.

*/
type GetTransactions struct {
	Context *middleware.Context
	Handler GetTransactionsHandler
}

func (o *GetTransactions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTransactionsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
