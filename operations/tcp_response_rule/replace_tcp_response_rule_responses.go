// Code generated by go-swagger; DO NOT EDIT.

package tcp_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// ReplaceTCPResponseRuleOKCode is the HTTP code returned for type ReplaceTCPResponseRuleOK
const ReplaceTCPResponseRuleOKCode int = 200

/*ReplaceTCPResponseRuleOK TCP Response Rule replaced

swagger:response replaceTcpResponseRuleOK
*/
type ReplaceTCPResponseRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.TCPResponseRule `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleOK creates ReplaceTCPResponseRuleOK with default headers values
func NewReplaceTCPResponseRuleOK() *ReplaceTCPResponseRuleOK {

	return &ReplaceTCPResponseRuleOK{}
}

// WithPayload adds the payload to the replace Tcp response rule o k response
func (o *ReplaceTCPResponseRuleOK) WithPayload(payload *models.TCPResponseRule) *ReplaceTCPResponseRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule o k response
func (o *ReplaceTCPResponseRuleOK) SetPayload(payload *models.TCPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPResponseRuleBadRequestCode is the HTTP code returned for type ReplaceTCPResponseRuleBadRequest
const ReplaceTCPResponseRuleBadRequestCode int = 400

/*ReplaceTCPResponseRuleBadRequest Bad request

swagger:response replaceTcpResponseRuleBadRequest
*/
type ReplaceTCPResponseRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleBadRequest creates ReplaceTCPResponseRuleBadRequest with default headers values
func NewReplaceTCPResponseRuleBadRequest() *ReplaceTCPResponseRuleBadRequest {

	return &ReplaceTCPResponseRuleBadRequest{}
}

// WithPayload adds the payload to the replace Tcp response rule bad request response
func (o *ReplaceTCPResponseRuleBadRequest) WithPayload(payload *models.Error) *ReplaceTCPResponseRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule bad request response
func (o *ReplaceTCPResponseRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPResponseRuleNotFoundCode is the HTTP code returned for type ReplaceTCPResponseRuleNotFound
const ReplaceTCPResponseRuleNotFoundCode int = 404

/*ReplaceTCPResponseRuleNotFound The specified resource was not found

swagger:response replaceTcpResponseRuleNotFound
*/
type ReplaceTCPResponseRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleNotFound creates ReplaceTCPResponseRuleNotFound with default headers values
func NewReplaceTCPResponseRuleNotFound() *ReplaceTCPResponseRuleNotFound {

	return &ReplaceTCPResponseRuleNotFound{}
}

// WithPayload adds the payload to the replace Tcp response rule not found response
func (o *ReplaceTCPResponseRuleNotFound) WithPayload(payload *models.Error) *ReplaceTCPResponseRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule not found response
func (o *ReplaceTCPResponseRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ReplaceTCPResponseRuleDefault General Error

swagger:response replaceTcpResponseRuleDefault
*/
type ReplaceTCPResponseRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleDefault creates ReplaceTCPResponseRuleDefault with default headers values
func NewReplaceTCPResponseRuleDefault(code int) *ReplaceTCPResponseRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPResponseRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP response rule default response
func (o *ReplaceTCPResponseRuleDefault) WithStatusCode(code int) *ReplaceTCPResponseRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP response rule default response
func (o *ReplaceTCPResponseRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the replace TCP response rule default response
func (o *ReplaceTCPResponseRuleDefault) WithPayload(payload *models.Error) *ReplaceTCPResponseRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP response rule default response
func (o *ReplaceTCPResponseRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
