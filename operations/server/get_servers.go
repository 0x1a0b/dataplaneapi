// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetServersHandlerFunc turns a function with the right signature into a get servers handler
type GetServersHandlerFunc func(GetServersParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServersHandlerFunc) Handle(params GetServersParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetServersHandler interface for that can handle valid get servers params
type GetServersHandler interface {
	Handle(GetServersParams, interface{}) middleware.Responder
}

// NewGetServers creates a new http.Handler for the get servers operation
func NewGetServers(ctx *middleware.Context, handler GetServersHandler) *GetServers {
	return &GetServers{Context: ctx, Handler: handler}
}

/*GetServers swagger:route GET /services/haproxy/configuration/servers Server getServers

Return an array of servers

Returns an array of all servers that are configured in specified backend.

*/
type GetServers struct {
	Context *middleware.Context
	Handler GetServersHandler
}

func (o *GetServers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetServersParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
