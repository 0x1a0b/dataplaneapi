// Code generated by go-swagger; DO NOT EDIT.

package backend_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// CreateBackendSwitchingRuleCreatedCode is the HTTP code returned for type CreateBackendSwitchingRuleCreated
const CreateBackendSwitchingRuleCreatedCode int = 201

/*CreateBackendSwitchingRuleCreated Backend Switching Rule created

swagger:response createBackendSwitchingRuleCreated
*/
type CreateBackendSwitchingRuleCreated struct {

	/*
	  In: Body
	*/
	Payload *models.BackendSwitchingRule `json:"body,omitempty"`
}

// NewCreateBackendSwitchingRuleCreated creates CreateBackendSwitchingRuleCreated with default headers values
func NewCreateBackendSwitchingRuleCreated() *CreateBackendSwitchingRuleCreated {

	return &CreateBackendSwitchingRuleCreated{}
}

// WithPayload adds the payload to the create backend switching rule created response
func (o *CreateBackendSwitchingRuleCreated) WithPayload(payload *models.BackendSwitchingRule) *CreateBackendSwitchingRuleCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create backend switching rule created response
func (o *CreateBackendSwitchingRuleCreated) SetPayload(payload *models.BackendSwitchingRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateBackendSwitchingRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateBackendSwitchingRuleBadRequestCode is the HTTP code returned for type CreateBackendSwitchingRuleBadRequest
const CreateBackendSwitchingRuleBadRequestCode int = 400

/*CreateBackendSwitchingRuleBadRequest Bad request

swagger:response createBackendSwitchingRuleBadRequest
*/
type CreateBackendSwitchingRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateBackendSwitchingRuleBadRequest creates CreateBackendSwitchingRuleBadRequest with default headers values
func NewCreateBackendSwitchingRuleBadRequest() *CreateBackendSwitchingRuleBadRequest {

	return &CreateBackendSwitchingRuleBadRequest{}
}

// WithPayload adds the payload to the create backend switching rule bad request response
func (o *CreateBackendSwitchingRuleBadRequest) WithPayload(payload *models.Error) *CreateBackendSwitchingRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create backend switching rule bad request response
func (o *CreateBackendSwitchingRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateBackendSwitchingRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateBackendSwitchingRuleConflictCode is the HTTP code returned for type CreateBackendSwitchingRuleConflict
const CreateBackendSwitchingRuleConflictCode int = 409

/*CreateBackendSwitchingRuleConflict The specified resource already exists

swagger:response createBackendSwitchingRuleConflict
*/
type CreateBackendSwitchingRuleConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateBackendSwitchingRuleConflict creates CreateBackendSwitchingRuleConflict with default headers values
func NewCreateBackendSwitchingRuleConflict() *CreateBackendSwitchingRuleConflict {

	return &CreateBackendSwitchingRuleConflict{}
}

// WithPayload adds the payload to the create backend switching rule conflict response
func (o *CreateBackendSwitchingRuleConflict) WithPayload(payload *models.Error) *CreateBackendSwitchingRuleConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create backend switching rule conflict response
func (o *CreateBackendSwitchingRuleConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateBackendSwitchingRuleConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateBackendSwitchingRuleDefault General Error

swagger:response createBackendSwitchingRuleDefault
*/
type CreateBackendSwitchingRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateBackendSwitchingRuleDefault creates CreateBackendSwitchingRuleDefault with default headers values
func NewCreateBackendSwitchingRuleDefault(code int) *CreateBackendSwitchingRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateBackendSwitchingRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create backend switching rule default response
func (o *CreateBackendSwitchingRuleDefault) WithStatusCode(code int) *CreateBackendSwitchingRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create backend switching rule default response
func (o *CreateBackendSwitchingRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create backend switching rule default response
func (o *CreateBackendSwitchingRuleDefault) WithPayload(payload *models.Error) *CreateBackendSwitchingRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create backend switching rule default response
func (o *CreateBackendSwitchingRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateBackendSwitchingRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
