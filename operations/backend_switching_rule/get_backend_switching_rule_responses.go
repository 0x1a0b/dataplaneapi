// Code generated by go-swagger; DO NOT EDIT.

package backend_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetBackendSwitchingRuleOKCode is the HTTP code returned for type GetBackendSwitchingRuleOK
const GetBackendSwitchingRuleOKCode int = 200

/*GetBackendSwitchingRuleOK Successful operation

swagger:response getBackendSwitchingRuleOK
*/
type GetBackendSwitchingRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetBackendSwitchingRuleOKBody `json:"body,omitempty"`
}

// NewGetBackendSwitchingRuleOK creates GetBackendSwitchingRuleOK with default headers values
func NewGetBackendSwitchingRuleOK() *GetBackendSwitchingRuleOK {

	return &GetBackendSwitchingRuleOK{}
}

// WithPayload adds the payload to the get backend switching rule o k response
func (o *GetBackendSwitchingRuleOK) WithPayload(payload *models.GetBackendSwitchingRuleOKBody) *GetBackendSwitchingRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backend switching rule o k response
func (o *GetBackendSwitchingRuleOK) SetPayload(payload *models.GetBackendSwitchingRuleOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendSwitchingRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendSwitchingRuleNotFoundCode is the HTTP code returned for type GetBackendSwitchingRuleNotFound
const GetBackendSwitchingRuleNotFoundCode int = 404

/*GetBackendSwitchingRuleNotFound The specified resource was not found

swagger:response getBackendSwitchingRuleNotFound
*/
type GetBackendSwitchingRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBackendSwitchingRuleNotFound creates GetBackendSwitchingRuleNotFound with default headers values
func NewGetBackendSwitchingRuleNotFound() *GetBackendSwitchingRuleNotFound {

	return &GetBackendSwitchingRuleNotFound{}
}

// WithPayload adds the payload to the get backend switching rule not found response
func (o *GetBackendSwitchingRuleNotFound) WithPayload(payload *models.Error) *GetBackendSwitchingRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backend switching rule not found response
func (o *GetBackendSwitchingRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendSwitchingRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetBackendSwitchingRuleDefault General Error

swagger:response getBackendSwitchingRuleDefault
*/
type GetBackendSwitchingRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBackendSwitchingRuleDefault creates GetBackendSwitchingRuleDefault with default headers values
func NewGetBackendSwitchingRuleDefault(code int) *GetBackendSwitchingRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &GetBackendSwitchingRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get backend switching rule default response
func (o *GetBackendSwitchingRuleDefault) WithStatusCode(code int) *GetBackendSwitchingRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get backend switching rule default response
func (o *GetBackendSwitchingRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get backend switching rule default response
func (o *GetBackendSwitchingRuleDefault) WithPayload(payload *models.Error) *GetBackendSwitchingRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backend switching rule default response
func (o *GetBackendSwitchingRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendSwitchingRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
