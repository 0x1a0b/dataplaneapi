// Code generated by go-swagger; DO NOT EDIT.

package backend_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBackendSwitchingRulesHandlerFunc turns a function with the right signature into a get backend switching rules handler
type GetBackendSwitchingRulesHandlerFunc func(GetBackendSwitchingRulesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBackendSwitchingRulesHandlerFunc) Handle(params GetBackendSwitchingRulesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetBackendSwitchingRulesHandler interface for that can handle valid get backend switching rules params
type GetBackendSwitchingRulesHandler interface {
	Handle(GetBackendSwitchingRulesParams, interface{}) middleware.Responder
}

// NewGetBackendSwitchingRules creates a new http.Handler for the get backend switching rules operation
func NewGetBackendSwitchingRules(ctx *middleware.Context, handler GetBackendSwitchingRulesHandler) *GetBackendSwitchingRules {
	return &GetBackendSwitchingRules{Context: ctx, Handler: handler}
}

/*GetBackendSwitchingRules swagger:route GET /services/haproxy/configuration/backend_switching_rules BackendSwitchingRule getBackendSwitchingRules

Return an array of all Backend Switching Rules

Returns all Backend Switching Rules that are configured in specified frontend.

*/
type GetBackendSwitchingRules struct {
	Context *middleware.Context
	Handler GetBackendSwitchingRulesHandler
}

func (o *GetBackendSwitchingRules) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBackendSwitchingRulesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
