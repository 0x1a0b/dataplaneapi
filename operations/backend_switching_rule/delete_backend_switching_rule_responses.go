// Code generated by go-swagger; DO NOT EDIT.

package backend_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// DeleteBackendSwitchingRuleNoContentCode is the HTTP code returned for type DeleteBackendSwitchingRuleNoContent
const DeleteBackendSwitchingRuleNoContentCode int = 204

/*DeleteBackendSwitchingRuleNoContent Backend Switching Rule deleted

swagger:response deleteBackendSwitchingRuleNoContent
*/
type DeleteBackendSwitchingRuleNoContent struct {
}

// NewDeleteBackendSwitchingRuleNoContent creates DeleteBackendSwitchingRuleNoContent with default headers values
func NewDeleteBackendSwitchingRuleNoContent() *DeleteBackendSwitchingRuleNoContent {

	return &DeleteBackendSwitchingRuleNoContent{}
}

// WriteResponse to the client
func (o *DeleteBackendSwitchingRuleNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteBackendSwitchingRuleNotFoundCode is the HTTP code returned for type DeleteBackendSwitchingRuleNotFound
const DeleteBackendSwitchingRuleNotFoundCode int = 404

/*DeleteBackendSwitchingRuleNotFound The specified resource was not found

swagger:response deleteBackendSwitchingRuleNotFound
*/
type DeleteBackendSwitchingRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteBackendSwitchingRuleNotFound creates DeleteBackendSwitchingRuleNotFound with default headers values
func NewDeleteBackendSwitchingRuleNotFound() *DeleteBackendSwitchingRuleNotFound {

	return &DeleteBackendSwitchingRuleNotFound{}
}

// WithPayload adds the payload to the delete backend switching rule not found response
func (o *DeleteBackendSwitchingRuleNotFound) WithPayload(payload *models.Error) *DeleteBackendSwitchingRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete backend switching rule not found response
func (o *DeleteBackendSwitchingRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBackendSwitchingRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteBackendSwitchingRuleDefault General Error

swagger:response deleteBackendSwitchingRuleDefault
*/
type DeleteBackendSwitchingRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteBackendSwitchingRuleDefault creates DeleteBackendSwitchingRuleDefault with default headers values
func NewDeleteBackendSwitchingRuleDefault(code int) *DeleteBackendSwitchingRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteBackendSwitchingRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete backend switching rule default response
func (o *DeleteBackendSwitchingRuleDefault) WithStatusCode(code int) *DeleteBackendSwitchingRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete backend switching rule default response
func (o *DeleteBackendSwitchingRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete backend switching rule default response
func (o *DeleteBackendSwitchingRuleDefault) WithPayload(payload *models.Error) *DeleteBackendSwitchingRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete backend switching rule default response
func (o *DeleteBackendSwitchingRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBackendSwitchingRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
