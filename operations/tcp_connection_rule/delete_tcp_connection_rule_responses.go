// Code generated by go-swagger; DO NOT EDIT.

package tcp_connection_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// DeleteTCPConnectionRuleNoContentCode is the HTTP code returned for type DeleteTCPConnectionRuleNoContent
const DeleteTCPConnectionRuleNoContentCode int = 204

/*DeleteTCPConnectionRuleNoContent TCP Connection Rule deleted

swagger:response deleteTcpConnectionRuleNoContent
*/
type DeleteTCPConnectionRuleNoContent struct {
}

// NewDeleteTCPConnectionRuleNoContent creates DeleteTCPConnectionRuleNoContent with default headers values
func NewDeleteTCPConnectionRuleNoContent() *DeleteTCPConnectionRuleNoContent {

	return &DeleteTCPConnectionRuleNoContent{}
}

// WriteResponse to the client
func (o *DeleteTCPConnectionRuleNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteTCPConnectionRuleNotFoundCode is the HTTP code returned for type DeleteTCPConnectionRuleNotFound
const DeleteTCPConnectionRuleNotFoundCode int = 404

/*DeleteTCPConnectionRuleNotFound The specified resource was not found

swagger:response deleteTcpConnectionRuleNotFound
*/
type DeleteTCPConnectionRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteTCPConnectionRuleNotFound creates DeleteTCPConnectionRuleNotFound with default headers values
func NewDeleteTCPConnectionRuleNotFound() *DeleteTCPConnectionRuleNotFound {

	return &DeleteTCPConnectionRuleNotFound{}
}

// WithPayload adds the payload to the delete Tcp connection rule not found response
func (o *DeleteTCPConnectionRuleNotFound) WithPayload(payload *models.Error) *DeleteTCPConnectionRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Tcp connection rule not found response
func (o *DeleteTCPConnectionRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTCPConnectionRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteTCPConnectionRuleDefault General Error

swagger:response deleteTcpConnectionRuleDefault
*/
type DeleteTCPConnectionRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteTCPConnectionRuleDefault creates DeleteTCPConnectionRuleDefault with default headers values
func NewDeleteTCPConnectionRuleDefault(code int) *DeleteTCPConnectionRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteTCPConnectionRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete TCP connection rule default response
func (o *DeleteTCPConnectionRuleDefault) WithStatusCode(code int) *DeleteTCPConnectionRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete TCP connection rule default response
func (o *DeleteTCPConnectionRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete TCP connection rule default response
func (o *DeleteTCPConnectionRuleDefault) WithPayload(payload *models.Error) *DeleteTCPConnectionRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete TCP connection rule default response
func (o *DeleteTCPConnectionRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTCPConnectionRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
