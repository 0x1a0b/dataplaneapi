// Code generated by go-swagger; DO NOT EDIT.

package tcp_connection_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// ReplaceTCPConnectionRuleOKCode is the HTTP code returned for type ReplaceTCPConnectionRuleOK
const ReplaceTCPConnectionRuleOKCode int = 200

/*ReplaceTCPConnectionRuleOK TCP Connection Rule replaced

swagger:response replaceTcpConnectionRuleOK
*/
type ReplaceTCPConnectionRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.TCPRule `json:"body,omitempty"`
}

// NewReplaceTCPConnectionRuleOK creates ReplaceTCPConnectionRuleOK with default headers values
func NewReplaceTCPConnectionRuleOK() *ReplaceTCPConnectionRuleOK {

	return &ReplaceTCPConnectionRuleOK{}
}

// WithPayload adds the payload to the replace Tcp connection rule o k response
func (o *ReplaceTCPConnectionRuleOK) WithPayload(payload *models.TCPRule) *ReplaceTCPConnectionRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp connection rule o k response
func (o *ReplaceTCPConnectionRuleOK) SetPayload(payload *models.TCPRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPConnectionRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPConnectionRuleBadRequestCode is the HTTP code returned for type ReplaceTCPConnectionRuleBadRequest
const ReplaceTCPConnectionRuleBadRequestCode int = 400

/*ReplaceTCPConnectionRuleBadRequest Bad request

swagger:response replaceTcpConnectionRuleBadRequest
*/
type ReplaceTCPConnectionRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPConnectionRuleBadRequest creates ReplaceTCPConnectionRuleBadRequest with default headers values
func NewReplaceTCPConnectionRuleBadRequest() *ReplaceTCPConnectionRuleBadRequest {

	return &ReplaceTCPConnectionRuleBadRequest{}
}

// WithPayload adds the payload to the replace Tcp connection rule bad request response
func (o *ReplaceTCPConnectionRuleBadRequest) WithPayload(payload *models.Error) *ReplaceTCPConnectionRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp connection rule bad request response
func (o *ReplaceTCPConnectionRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPConnectionRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPConnectionRuleNotFoundCode is the HTTP code returned for type ReplaceTCPConnectionRuleNotFound
const ReplaceTCPConnectionRuleNotFoundCode int = 404

/*ReplaceTCPConnectionRuleNotFound The specified resource was not found

swagger:response replaceTcpConnectionRuleNotFound
*/
type ReplaceTCPConnectionRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPConnectionRuleNotFound creates ReplaceTCPConnectionRuleNotFound with default headers values
func NewReplaceTCPConnectionRuleNotFound() *ReplaceTCPConnectionRuleNotFound {

	return &ReplaceTCPConnectionRuleNotFound{}
}

// WithPayload adds the payload to the replace Tcp connection rule not found response
func (o *ReplaceTCPConnectionRuleNotFound) WithPayload(payload *models.Error) *ReplaceTCPConnectionRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp connection rule not found response
func (o *ReplaceTCPConnectionRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPConnectionRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ReplaceTCPConnectionRuleDefault General Error

swagger:response replaceTcpConnectionRuleDefault
*/
type ReplaceTCPConnectionRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPConnectionRuleDefault creates ReplaceTCPConnectionRuleDefault with default headers values
func NewReplaceTCPConnectionRuleDefault(code int) *ReplaceTCPConnectionRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPConnectionRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP connection rule default response
func (o *ReplaceTCPConnectionRuleDefault) WithStatusCode(code int) *ReplaceTCPConnectionRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP connection rule default response
func (o *ReplaceTCPConnectionRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the replace TCP connection rule default response
func (o *ReplaceTCPConnectionRuleDefault) WithPayload(payload *models.Error) *ReplaceTCPConnectionRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP connection rule default response
func (o *ReplaceTCPConnectionRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPConnectionRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
