// Code generated by go-swagger; DO NOT EDIT.

package tcp_connection_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateTCPConnectionRuleHandlerFunc turns a function with the right signature into a create TCP connection rule handler
type CreateTCPConnectionRuleHandlerFunc func(CreateTCPConnectionRuleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateTCPConnectionRuleHandlerFunc) Handle(params CreateTCPConnectionRuleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateTCPConnectionRuleHandler interface for that can handle valid create TCP connection rule params
type CreateTCPConnectionRuleHandler interface {
	Handle(CreateTCPConnectionRuleParams, interface{}) middleware.Responder
}

// NewCreateTCPConnectionRule creates a new http.Handler for the create TCP connection rule operation
func NewCreateTCPConnectionRule(ctx *middleware.Context, handler CreateTCPConnectionRuleHandler) *CreateTCPConnectionRule {
	return &CreateTCPConnectionRule{Context: ctx, Handler: handler}
}

/*CreateTCPConnectionRule swagger:route POST /services/haproxy/configuration/tcp_connection_rules TCPConnectionRule createTcpConnectionRule

Add a new TCP Connection Rule

Adds a new TCP Connection Rule of the specified type in the specified frontend.

*/
type CreateTCPConnectionRule struct {
	Context *middleware.Context
	Handler CreateTCPConnectionRuleHandler
}

func (o *CreateTCPConnectionRule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateTCPConnectionRuleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
