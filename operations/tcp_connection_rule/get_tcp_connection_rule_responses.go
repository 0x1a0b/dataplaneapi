// Code generated by go-swagger; DO NOT EDIT.

package tcp_connection_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetTCPConnectionRuleOKCode is the HTTP code returned for type GetTCPConnectionRuleOK
const GetTCPConnectionRuleOKCode int = 200

/*GetTCPConnectionRuleOK Successful operation

swagger:response getTcpConnectionRuleOK
*/
type GetTCPConnectionRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetTCPConnectionRuleOKBody `json:"body,omitempty"`
}

// NewGetTCPConnectionRuleOK creates GetTCPConnectionRuleOK with default headers values
func NewGetTCPConnectionRuleOK() *GetTCPConnectionRuleOK {

	return &GetTCPConnectionRuleOK{}
}

// WithPayload adds the payload to the get Tcp connection rule o k response
func (o *GetTCPConnectionRuleOK) WithPayload(payload *models.GetTCPConnectionRuleOKBody) *GetTCPConnectionRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Tcp connection rule o k response
func (o *GetTCPConnectionRuleOK) SetPayload(payload *models.GetTCPConnectionRuleOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPConnectionRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTCPConnectionRuleNotFoundCode is the HTTP code returned for type GetTCPConnectionRuleNotFound
const GetTCPConnectionRuleNotFoundCode int = 404

/*GetTCPConnectionRuleNotFound The specified resource was not found

swagger:response getTcpConnectionRuleNotFound
*/
type GetTCPConnectionRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTCPConnectionRuleNotFound creates GetTCPConnectionRuleNotFound with default headers values
func NewGetTCPConnectionRuleNotFound() *GetTCPConnectionRuleNotFound {

	return &GetTCPConnectionRuleNotFound{}
}

// WithPayload adds the payload to the get Tcp connection rule not found response
func (o *GetTCPConnectionRuleNotFound) WithPayload(payload *models.Error) *GetTCPConnectionRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Tcp connection rule not found response
func (o *GetTCPConnectionRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPConnectionRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetTCPConnectionRuleDefault General Error

swagger:response getTcpConnectionRuleDefault
*/
type GetTCPConnectionRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTCPConnectionRuleDefault creates GetTCPConnectionRuleDefault with default headers values
func NewGetTCPConnectionRuleDefault(code int) *GetTCPConnectionRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &GetTCPConnectionRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get TCP connection rule default response
func (o *GetTCPConnectionRuleDefault) WithStatusCode(code int) *GetTCPConnectionRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get TCP connection rule default response
func (o *GetTCPConnectionRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get TCP connection rule default response
func (o *GetTCPConnectionRuleDefault) WithPayload(payload *models.Error) *GetTCPConnectionRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get TCP connection rule default response
func (o *GetTCPConnectionRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPConnectionRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
