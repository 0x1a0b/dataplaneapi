// Code generated by go-swagger; DO NOT EDIT.

package tcp_connection_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetTCPConnectionRulesOKCode is the HTTP code returned for type GetTCPConnectionRulesOK
const GetTCPConnectionRulesOKCode int = 200

/*GetTCPConnectionRulesOK Successful operation

swagger:response getTcpConnectionRulesOK
*/
type GetTCPConnectionRulesOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetTCPConnectionRulesOKBody `json:"body,omitempty"`
}

// NewGetTCPConnectionRulesOK creates GetTCPConnectionRulesOK with default headers values
func NewGetTCPConnectionRulesOK() *GetTCPConnectionRulesOK {

	return &GetTCPConnectionRulesOK{}
}

// WithPayload adds the payload to the get Tcp connection rules o k response
func (o *GetTCPConnectionRulesOK) WithPayload(payload *models.GetTCPConnectionRulesOKBody) *GetTCPConnectionRulesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Tcp connection rules o k response
func (o *GetTCPConnectionRulesOK) SetPayload(payload *models.GetTCPConnectionRulesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPConnectionRulesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetTCPConnectionRulesDefault General Error

swagger:response getTcpConnectionRulesDefault
*/
type GetTCPConnectionRulesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTCPConnectionRulesDefault creates GetTCPConnectionRulesDefault with default headers values
func NewGetTCPConnectionRulesDefault(code int) *GetTCPConnectionRulesDefault {
	if code <= 0 {
		code = 500
	}

	return &GetTCPConnectionRulesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get TCP connection rules default response
func (o *GetTCPConnectionRulesDefault) WithStatusCode(code int) *GetTCPConnectionRulesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get TCP connection rules default response
func (o *GetTCPConnectionRulesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get TCP connection rules default response
func (o *GetTCPConnectionRulesDefault) WithPayload(payload *models.Error) *GetTCPConnectionRulesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get TCP connection rules default response
func (o *GetTCPConnectionRulesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPConnectionRulesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
