// Code generated by go-swagger; DO NOT EDIT.

package tcp_connection_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// CreateTCPConnectionRuleCreatedCode is the HTTP code returned for type CreateTCPConnectionRuleCreated
const CreateTCPConnectionRuleCreatedCode int = 201

/*CreateTCPConnectionRuleCreated TCP Connection Rule created

swagger:response createTcpConnectionRuleCreated
*/
type CreateTCPConnectionRuleCreated struct {

	/*
	  In: Body
	*/
	Payload *models.TCPRule `json:"body,omitempty"`
}

// NewCreateTCPConnectionRuleCreated creates CreateTCPConnectionRuleCreated with default headers values
func NewCreateTCPConnectionRuleCreated() *CreateTCPConnectionRuleCreated {

	return &CreateTCPConnectionRuleCreated{}
}

// WithPayload adds the payload to the create Tcp connection rule created response
func (o *CreateTCPConnectionRuleCreated) WithPayload(payload *models.TCPRule) *CreateTCPConnectionRuleCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp connection rule created response
func (o *CreateTCPConnectionRuleCreated) SetPayload(payload *models.TCPRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPConnectionRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPConnectionRuleBadRequestCode is the HTTP code returned for type CreateTCPConnectionRuleBadRequest
const CreateTCPConnectionRuleBadRequestCode int = 400

/*CreateTCPConnectionRuleBadRequest Bad request

swagger:response createTcpConnectionRuleBadRequest
*/
type CreateTCPConnectionRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPConnectionRuleBadRequest creates CreateTCPConnectionRuleBadRequest with default headers values
func NewCreateTCPConnectionRuleBadRequest() *CreateTCPConnectionRuleBadRequest {

	return &CreateTCPConnectionRuleBadRequest{}
}

// WithPayload adds the payload to the create Tcp connection rule bad request response
func (o *CreateTCPConnectionRuleBadRequest) WithPayload(payload *models.Error) *CreateTCPConnectionRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp connection rule bad request response
func (o *CreateTCPConnectionRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPConnectionRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPConnectionRuleConflictCode is the HTTP code returned for type CreateTCPConnectionRuleConflict
const CreateTCPConnectionRuleConflictCode int = 409

/*CreateTCPConnectionRuleConflict The specified resource already exists

swagger:response createTcpConnectionRuleConflict
*/
type CreateTCPConnectionRuleConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPConnectionRuleConflict creates CreateTCPConnectionRuleConflict with default headers values
func NewCreateTCPConnectionRuleConflict() *CreateTCPConnectionRuleConflict {

	return &CreateTCPConnectionRuleConflict{}
}

// WithPayload adds the payload to the create Tcp connection rule conflict response
func (o *CreateTCPConnectionRuleConflict) WithPayload(payload *models.Error) *CreateTCPConnectionRuleConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp connection rule conflict response
func (o *CreateTCPConnectionRuleConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPConnectionRuleConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateTCPConnectionRuleDefault General Error

swagger:response createTcpConnectionRuleDefault
*/
type CreateTCPConnectionRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPConnectionRuleDefault creates CreateTCPConnectionRuleDefault with default headers values
func NewCreateTCPConnectionRuleDefault(code int) *CreateTCPConnectionRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateTCPConnectionRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create TCP connection rule default response
func (o *CreateTCPConnectionRuleDefault) WithStatusCode(code int) *CreateTCPConnectionRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create TCP connection rule default response
func (o *CreateTCPConnectionRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create TCP connection rule default response
func (o *CreateTCPConnectionRuleDefault) WithPayload(payload *models.Error) *CreateTCPConnectionRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create TCP connection rule default response
func (o *CreateTCPConnectionRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPConnectionRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
