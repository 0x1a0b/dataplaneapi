// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/haproxytech/controller/operations/backend"
	"github.com/haproxytech/controller/operations/backend_switching_rule"
	"github.com/haproxytech/controller/operations/configuration"
	"github.com/haproxytech/controller/operations/discovery"
	"github.com/haproxytech/controller/operations/filter"
	"github.com/haproxytech/controller/operations/frontend"
	"github.com/haproxytech/controller/operations/global"
	"github.com/haproxytech/controller/operations/http_request_rule"
	"github.com/haproxytech/controller/operations/http_response_rule"
	"github.com/haproxytech/controller/operations/information"
	"github.com/haproxytech/controller/operations/listener"
	"github.com/haproxytech/controller/operations/server"
	"github.com/haproxytech/controller/operations/server_switching_rule"
	"github.com/haproxytech/controller/operations/sites"
	"github.com/haproxytech/controller/operations/stats"
	"github.com/haproxytech/controller/operations/stick_request_rule"
	"github.com/haproxytech/controller/operations/stick_response_rule"
	"github.com/haproxytech/controller/operations/tcp_connection_rule"
	"github.com/haproxytech/controller/operations/tcp_content_rule"
	"github.com/haproxytech/controller/operations/transactions"
)

// NewControllerAPI creates a new Controller instance
func NewControllerAPI(spec *loads.Document) *ControllerAPI {
	return &ControllerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		TxtConsumer:         runtime.TextConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		TxtProducer:         runtime.TextProducer(),
		TransactionsCommitTransactionHandler: transactions.CommitTransactionHandlerFunc(func(params transactions.CommitTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TransactionsCommitTransaction has not yet been implemented")
		}),
		BackendCreateBackendHandler: backend.CreateBackendHandlerFunc(func(params backend.CreateBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendCreateBackend has not yet been implemented")
		}),
		BackendSwitchingRuleCreateBackendSwitchingRuleHandler: backend_switching_rule.CreateBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.CreateBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendSwitchingRuleCreateBackendSwitchingRule has not yet been implemented")
		}),
		FilterCreateFilterHandler: filter.CreateFilterHandlerFunc(func(params filter.CreateFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FilterCreateFilter has not yet been implemented")
		}),
		FrontendCreateFrontendHandler: frontend.CreateFrontendHandlerFunc(func(params frontend.CreateFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FrontendCreateFrontend has not yet been implemented")
		}),
		HTTPRequestRuleCreateHTTPRequestRuleHandler: http_request_rule.CreateHTTPRequestRuleHandlerFunc(func(params http_request_rule.CreateHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPRequestRuleCreateHTTPRequestRule has not yet been implemented")
		}),
		HTTPResponseRuleCreateHTTPResponseRuleHandler: http_response_rule.CreateHTTPResponseRuleHandlerFunc(func(params http_response_rule.CreateHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPResponseRuleCreateHTTPResponseRule has not yet been implemented")
		}),
		ListenerCreateListenerHandler: listener.CreateListenerHandlerFunc(func(params listener.CreateListenerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ListenerCreateListener has not yet been implemented")
		}),
		ServerCreateServerHandler: server.CreateServerHandlerFunc(func(params server.CreateServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerCreateServer has not yet been implemented")
		}),
		ServerSwitchingRuleCreateServerSwitchingRuleHandler: server_switching_rule.CreateServerSwitchingRuleHandlerFunc(func(params server_switching_rule.CreateServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerSwitchingRuleCreateServerSwitchingRule has not yet been implemented")
		}),
		SitesCreateSiteHandler: sites.CreateSiteHandlerFunc(func(params sites.CreateSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SitesCreateSite has not yet been implemented")
		}),
		StickRequestRuleCreateStickRequestRuleHandler: stick_request_rule.CreateStickRequestRuleHandlerFunc(func(params stick_request_rule.CreateStickRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickRequestRuleCreateStickRequestRule has not yet been implemented")
		}),
		StickResponseRuleCreateStickResponseRuleHandler: stick_response_rule.CreateStickResponseRuleHandlerFunc(func(params stick_response_rule.CreateStickResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickResponseRuleCreateStickResponseRule has not yet been implemented")
		}),
		TCPConnectionRuleCreateTCPConnectionRuleHandler: tcp_connection_rule.CreateTCPConnectionRuleHandlerFunc(func(params tcp_connection_rule.CreateTCPConnectionRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPConnectionRuleCreateTCPConnectionRule has not yet been implemented")
		}),
		TCPContentRuleCreateTCPContentRuleHandler: tcp_content_rule.CreateTCPContentRuleHandlerFunc(func(params tcp_content_rule.CreateTCPContentRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPContentRuleCreateTCPContentRule has not yet been implemented")
		}),
		BackendDeleteBackendHandler: backend.DeleteBackendHandlerFunc(func(params backend.DeleteBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendDeleteBackend has not yet been implemented")
		}),
		BackendSwitchingRuleDeleteBackendSwitchingRuleHandler: backend_switching_rule.DeleteBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.DeleteBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendSwitchingRuleDeleteBackendSwitchingRule has not yet been implemented")
		}),
		FilterDeleteFilterHandler: filter.DeleteFilterHandlerFunc(func(params filter.DeleteFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FilterDeleteFilter has not yet been implemented")
		}),
		FrontendDeleteFrontendHandler: frontend.DeleteFrontendHandlerFunc(func(params frontend.DeleteFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FrontendDeleteFrontend has not yet been implemented")
		}),
		HTTPRequestRuleDeleteHTTPRequestRuleHandler: http_request_rule.DeleteHTTPRequestRuleHandlerFunc(func(params http_request_rule.DeleteHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPRequestRuleDeleteHTTPRequestRule has not yet been implemented")
		}),
		HTTPResponseRuleDeleteHTTPResponseRuleHandler: http_response_rule.DeleteHTTPResponseRuleHandlerFunc(func(params http_response_rule.DeleteHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPResponseRuleDeleteHTTPResponseRule has not yet been implemented")
		}),
		ListenerDeleteListenerHandler: listener.DeleteListenerHandlerFunc(func(params listener.DeleteListenerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ListenerDeleteListener has not yet been implemented")
		}),
		ServerDeleteServerHandler: server.DeleteServerHandlerFunc(func(params server.DeleteServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerDeleteServer has not yet been implemented")
		}),
		ServerSwitchingRuleDeleteServerSwitchingRuleHandler: server_switching_rule.DeleteServerSwitchingRuleHandlerFunc(func(params server_switching_rule.DeleteServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerSwitchingRuleDeleteServerSwitchingRule has not yet been implemented")
		}),
		SitesDeleteSiteHandler: sites.DeleteSiteHandlerFunc(func(params sites.DeleteSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SitesDeleteSite has not yet been implemented")
		}),
		StickRequestRuleDeleteStickRequestRuleHandler: stick_request_rule.DeleteStickRequestRuleHandlerFunc(func(params stick_request_rule.DeleteStickRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickRequestRuleDeleteStickRequestRule has not yet been implemented")
		}),
		StickResponseRuleDeleteStickResponseRuleHandler: stick_response_rule.DeleteStickResponseRuleHandlerFunc(func(params stick_response_rule.DeleteStickResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickResponseRuleDeleteStickResponseRule has not yet been implemented")
		}),
		TCPConnectionRuleDeleteTCPConnectionRuleHandler: tcp_connection_rule.DeleteTCPConnectionRuleHandlerFunc(func(params tcp_connection_rule.DeleteTCPConnectionRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPConnectionRuleDeleteTCPConnectionRule has not yet been implemented")
		}),
		TCPContentRuleDeleteTCPContentRuleHandler: tcp_content_rule.DeleteTCPContentRuleHandlerFunc(func(params tcp_content_rule.DeleteTCPContentRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPContentRuleDeleteTCPContentRule has not yet been implemented")
		}),
		TransactionsDeleteTransactionHandler: transactions.DeleteTransactionHandlerFunc(func(params transactions.DeleteTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TransactionsDeleteTransaction has not yet been implemented")
		}),
		DiscoveryGetAPIEndpointsHandler: discovery.GetAPIEndpointsHandlerFunc(func(params discovery.GetAPIEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DiscoveryGetAPIEndpoints has not yet been implemented")
		}),
		BackendGetBackendHandler: backend.GetBackendHandlerFunc(func(params backend.GetBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetBackend has not yet been implemented")
		}),
		BackendSwitchingRuleGetBackendSwitchingRuleHandler: backend_switching_rule.GetBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.GetBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendSwitchingRuleGetBackendSwitchingRule has not yet been implemented")
		}),
		BackendSwitchingRuleGetBackendSwitchingRulesHandler: backend_switching_rule.GetBackendSwitchingRulesHandlerFunc(func(params backend_switching_rule.GetBackendSwitchingRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendSwitchingRuleGetBackendSwitchingRules has not yet been implemented")
		}),
		BackendGetBackendsHandler: backend.GetBackendsHandlerFunc(func(params backend.GetBackendsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetBackends has not yet been implemented")
		}),
		DiscoveryGetConfigurationEndpointsHandler: discovery.GetConfigurationEndpointsHandlerFunc(func(params discovery.GetConfigurationEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DiscoveryGetConfigurationEndpoints has not yet been implemented")
		}),
		FilterGetFilterHandler: filter.GetFilterHandlerFunc(func(params filter.GetFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FilterGetFilter has not yet been implemented")
		}),
		FilterGetFiltersHandler: filter.GetFiltersHandlerFunc(func(params filter.GetFiltersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FilterGetFilters has not yet been implemented")
		}),
		FrontendGetFrontendHandler: frontend.GetFrontendHandlerFunc(func(params frontend.GetFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FrontendGetFrontend has not yet been implemented")
		}),
		FrontendGetFrontendsHandler: frontend.GetFrontendsHandlerFunc(func(params frontend.GetFrontendsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FrontendGetFrontends has not yet been implemented")
		}),
		GlobalGetGlobalHandler: global.GetGlobalHandlerFunc(func(params global.GetGlobalParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GlobalGetGlobal has not yet been implemented")
		}),
		ConfigurationGetHAProxyConfigurationHandler: configuration.GetHAProxyConfigurationHandlerFunc(func(params configuration.GetHAProxyConfigurationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationGetHAProxyConfiguration has not yet been implemented")
		}),
		HTTPRequestRuleGetHTTPRequestRuleHandler: http_request_rule.GetHTTPRequestRuleHandlerFunc(func(params http_request_rule.GetHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPRequestRuleGetHTTPRequestRule has not yet been implemented")
		}),
		HTTPRequestRuleGetHTTPRequestRulesHandler: http_request_rule.GetHTTPRequestRulesHandlerFunc(func(params http_request_rule.GetHTTPRequestRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPRequestRuleGetHTTPRequestRules has not yet been implemented")
		}),
		HTTPResponseRuleGetHTTPResponseRuleHandler: http_response_rule.GetHTTPResponseRuleHandlerFunc(func(params http_response_rule.GetHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPResponseRuleGetHTTPResponseRule has not yet been implemented")
		}),
		HTTPResponseRuleGetHTTPResponseRulesHandler: http_response_rule.GetHTTPResponseRulesHandlerFunc(func(params http_response_rule.GetHTTPResponseRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPResponseRuleGetHTTPResponseRules has not yet been implemented")
		}),
		DiscoveryGetHaproxyEndpointsHandler: discovery.GetHaproxyEndpointsHandlerFunc(func(params discovery.GetHaproxyEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DiscoveryGetHaproxyEndpoints has not yet been implemented")
		}),
		InformationGetHaproxyProcessInfoHandler: information.GetHaproxyProcessInfoHandlerFunc(func(params information.GetHaproxyProcessInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InformationGetHaproxyProcessInfo has not yet been implemented")
		}),
		ListenerGetListenerHandler: listener.GetListenerHandlerFunc(func(params listener.GetListenerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ListenerGetListener has not yet been implemented")
		}),
		ListenerGetListenersHandler: listener.GetListenersHandlerFunc(func(params listener.GetListenersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ListenerGetListeners has not yet been implemented")
		}),
		ServerGetServerHandler: server.GetServerHandlerFunc(func(params server.GetServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerGetServer has not yet been implemented")
		}),
		ServerSwitchingRuleGetServerSwitchingRuleHandler: server_switching_rule.GetServerSwitchingRuleHandlerFunc(func(params server_switching_rule.GetServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerSwitchingRuleGetServerSwitchingRule has not yet been implemented")
		}),
		ServerSwitchingRuleGetServerSwitchingRulesHandler: server_switching_rule.GetServerSwitchingRulesHandlerFunc(func(params server_switching_rule.GetServerSwitchingRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerSwitchingRuleGetServerSwitchingRules has not yet been implemented")
		}),
		ServerGetServersHandler: server.GetServersHandlerFunc(func(params server.GetServersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerGetServers has not yet been implemented")
		}),
		DiscoveryGetServicesEndpointsHandler: discovery.GetServicesEndpointsHandlerFunc(func(params discovery.GetServicesEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DiscoveryGetServicesEndpoints has not yet been implemented")
		}),
		SitesGetSiteHandler: sites.GetSiteHandlerFunc(func(params sites.GetSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SitesGetSite has not yet been implemented")
		}),
		SitesGetSitesHandler: sites.GetSitesHandlerFunc(func(params sites.GetSitesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SitesGetSites has not yet been implemented")
		}),
		StatsGetStatsHandler: stats.GetStatsHandlerFunc(func(params stats.GetStatsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StatsGetStats has not yet been implemented")
		}),
		DiscoveryGetStatsEndpointsHandler: discovery.GetStatsEndpointsHandlerFunc(func(params discovery.GetStatsEndpointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DiscoveryGetStatsEndpoints has not yet been implemented")
		}),
		StickRequestRuleGetStickRequestRuleHandler: stick_request_rule.GetStickRequestRuleHandlerFunc(func(params stick_request_rule.GetStickRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickRequestRuleGetStickRequestRule has not yet been implemented")
		}),
		StickRequestRuleGetStickRequestRulesHandler: stick_request_rule.GetStickRequestRulesHandlerFunc(func(params stick_request_rule.GetStickRequestRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickRequestRuleGetStickRequestRules has not yet been implemented")
		}),
		StickResponseRuleGetStickResponseRuleHandler: stick_response_rule.GetStickResponseRuleHandlerFunc(func(params stick_response_rule.GetStickResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickResponseRuleGetStickResponseRule has not yet been implemented")
		}),
		StickResponseRuleGetStickResponseRulesHandler: stick_response_rule.GetStickResponseRulesHandlerFunc(func(params stick_response_rule.GetStickResponseRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickResponseRuleGetStickResponseRules has not yet been implemented")
		}),
		TCPConnectionRuleGetTCPConnectionRuleHandler: tcp_connection_rule.GetTCPConnectionRuleHandlerFunc(func(params tcp_connection_rule.GetTCPConnectionRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPConnectionRuleGetTCPConnectionRule has not yet been implemented")
		}),
		TCPConnectionRuleGetTCPConnectionRulesHandler: tcp_connection_rule.GetTCPConnectionRulesHandlerFunc(func(params tcp_connection_rule.GetTCPConnectionRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPConnectionRuleGetTCPConnectionRules has not yet been implemented")
		}),
		TCPContentRuleGetTCPContentRuleHandler: tcp_content_rule.GetTCPContentRuleHandlerFunc(func(params tcp_content_rule.GetTCPContentRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPContentRuleGetTCPContentRule has not yet been implemented")
		}),
		TCPContentRuleGetTCPContentRulesHandler: tcp_content_rule.GetTCPContentRulesHandlerFunc(func(params tcp_content_rule.GetTCPContentRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPContentRuleGetTCPContentRules has not yet been implemented")
		}),
		TransactionsGetTransactionHandler: transactions.GetTransactionHandlerFunc(func(params transactions.GetTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TransactionsGetTransaction has not yet been implemented")
		}),
		TransactionsGetTransactionsHandler: transactions.GetTransactionsHandlerFunc(func(params transactions.GetTransactionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TransactionsGetTransactions has not yet been implemented")
		}),
		ConfigurationPostHAProxyConfigurationHandler: configuration.PostHAProxyConfigurationHandlerFunc(func(params configuration.PostHAProxyConfigurationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ConfigurationPostHAProxyConfiguration has not yet been implemented")
		}),
		BackendReplaceBackendHandler: backend.ReplaceBackendHandlerFunc(func(params backend.ReplaceBackendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendReplaceBackend has not yet been implemented")
		}),
		BackendSwitchingRuleReplaceBackendSwitchingRuleHandler: backend_switching_rule.ReplaceBackendSwitchingRuleHandlerFunc(func(params backend_switching_rule.ReplaceBackendSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BackendSwitchingRuleReplaceBackendSwitchingRule has not yet been implemented")
		}),
		FilterReplaceFilterHandler: filter.ReplaceFilterHandlerFunc(func(params filter.ReplaceFilterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FilterReplaceFilter has not yet been implemented")
		}),
		FrontendReplaceFrontendHandler: frontend.ReplaceFrontendHandlerFunc(func(params frontend.ReplaceFrontendParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FrontendReplaceFrontend has not yet been implemented")
		}),
		GlobalReplaceGlobalHandler: global.ReplaceGlobalHandlerFunc(func(params global.ReplaceGlobalParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GlobalReplaceGlobal has not yet been implemented")
		}),
		HTTPRequestRuleReplaceHTTPRequestRuleHandler: http_request_rule.ReplaceHTTPRequestRuleHandlerFunc(func(params http_request_rule.ReplaceHTTPRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPRequestRuleReplaceHTTPRequestRule has not yet been implemented")
		}),
		HTTPResponseRuleReplaceHTTPResponseRuleHandler: http_response_rule.ReplaceHTTPResponseRuleHandlerFunc(func(params http_response_rule.ReplaceHTTPResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation HTTPResponseRuleReplaceHTTPResponseRule has not yet been implemented")
		}),
		ListenerReplaceListenerHandler: listener.ReplaceListenerHandlerFunc(func(params listener.ReplaceListenerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ListenerReplaceListener has not yet been implemented")
		}),
		ServerReplaceServerHandler: server.ReplaceServerHandlerFunc(func(params server.ReplaceServerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerReplaceServer has not yet been implemented")
		}),
		ServerSwitchingRuleReplaceServerSwitchingRuleHandler: server_switching_rule.ReplaceServerSwitchingRuleHandlerFunc(func(params server_switching_rule.ReplaceServerSwitchingRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ServerSwitchingRuleReplaceServerSwitchingRule has not yet been implemented")
		}),
		SitesReplaceSiteHandler: sites.ReplaceSiteHandlerFunc(func(params sites.ReplaceSiteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SitesReplaceSite has not yet been implemented")
		}),
		StickRequestRuleReplaceStickRequestRuleHandler: stick_request_rule.ReplaceStickRequestRuleHandlerFunc(func(params stick_request_rule.ReplaceStickRequestRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickRequestRuleReplaceStickRequestRule has not yet been implemented")
		}),
		StickResponseRuleReplaceStickResponseRuleHandler: stick_response_rule.ReplaceStickResponseRuleHandlerFunc(func(params stick_response_rule.ReplaceStickResponseRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation StickResponseRuleReplaceStickResponseRule has not yet been implemented")
		}),
		TCPConnectionRuleReplaceTCPConnectionRuleHandler: tcp_connection_rule.ReplaceTCPConnectionRuleHandlerFunc(func(params tcp_connection_rule.ReplaceTCPConnectionRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPConnectionRuleReplaceTCPConnectionRule has not yet been implemented")
		}),
		TCPContentRuleReplaceTCPContentRuleHandler: tcp_content_rule.ReplaceTCPContentRuleHandlerFunc(func(params tcp_content_rule.ReplaceTCPContentRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TCPContentRuleReplaceTCPContentRule has not yet been implemented")
		}),
		TransactionsStartTransactionHandler: transactions.StartTransactionHandlerFunc(func(params transactions.StartTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TransactionsStartTransaction has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (basic_auth) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*ControllerAPI API for editing and managing haproxy instances. Provides process information, configuration management,
haproxy stats and logs.
*/
type ControllerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// TxtConsumer registers a consumer for a "text/plain" mime type
	TxtConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// TransactionsCommitTransactionHandler sets the operation handler for the commit transaction operation
	TransactionsCommitTransactionHandler transactions.CommitTransactionHandler
	// BackendCreateBackendHandler sets the operation handler for the create backend operation
	BackendCreateBackendHandler backend.CreateBackendHandler
	// BackendSwitchingRuleCreateBackendSwitchingRuleHandler sets the operation handler for the create backend switching rule operation
	BackendSwitchingRuleCreateBackendSwitchingRuleHandler backend_switching_rule.CreateBackendSwitchingRuleHandler
	// FilterCreateFilterHandler sets the operation handler for the create filter operation
	FilterCreateFilterHandler filter.CreateFilterHandler
	// FrontendCreateFrontendHandler sets the operation handler for the create frontend operation
	FrontendCreateFrontendHandler frontend.CreateFrontendHandler
	// HTTPRequestRuleCreateHTTPRequestRuleHandler sets the operation handler for the create HTTP request rule operation
	HTTPRequestRuleCreateHTTPRequestRuleHandler http_request_rule.CreateHTTPRequestRuleHandler
	// HTTPResponseRuleCreateHTTPResponseRuleHandler sets the operation handler for the create HTTP response rule operation
	HTTPResponseRuleCreateHTTPResponseRuleHandler http_response_rule.CreateHTTPResponseRuleHandler
	// ListenerCreateListenerHandler sets the operation handler for the create listener operation
	ListenerCreateListenerHandler listener.CreateListenerHandler
	// ServerCreateServerHandler sets the operation handler for the create server operation
	ServerCreateServerHandler server.CreateServerHandler
	// ServerSwitchingRuleCreateServerSwitchingRuleHandler sets the operation handler for the create server switching rule operation
	ServerSwitchingRuleCreateServerSwitchingRuleHandler server_switching_rule.CreateServerSwitchingRuleHandler
	// SitesCreateSiteHandler sets the operation handler for the create site operation
	SitesCreateSiteHandler sites.CreateSiteHandler
	// StickRequestRuleCreateStickRequestRuleHandler sets the operation handler for the create stick request rule operation
	StickRequestRuleCreateStickRequestRuleHandler stick_request_rule.CreateStickRequestRuleHandler
	// StickResponseRuleCreateStickResponseRuleHandler sets the operation handler for the create stick response rule operation
	StickResponseRuleCreateStickResponseRuleHandler stick_response_rule.CreateStickResponseRuleHandler
	// TCPConnectionRuleCreateTCPConnectionRuleHandler sets the operation handler for the create TCP connection rule operation
	TCPConnectionRuleCreateTCPConnectionRuleHandler tcp_connection_rule.CreateTCPConnectionRuleHandler
	// TCPContentRuleCreateTCPContentRuleHandler sets the operation handler for the create TCP content rule operation
	TCPContentRuleCreateTCPContentRuleHandler tcp_content_rule.CreateTCPContentRuleHandler
	// BackendDeleteBackendHandler sets the operation handler for the delete backend operation
	BackendDeleteBackendHandler backend.DeleteBackendHandler
	// BackendSwitchingRuleDeleteBackendSwitchingRuleHandler sets the operation handler for the delete backend switching rule operation
	BackendSwitchingRuleDeleteBackendSwitchingRuleHandler backend_switching_rule.DeleteBackendSwitchingRuleHandler
	// FilterDeleteFilterHandler sets the operation handler for the delete filter operation
	FilterDeleteFilterHandler filter.DeleteFilterHandler
	// FrontendDeleteFrontendHandler sets the operation handler for the delete frontend operation
	FrontendDeleteFrontendHandler frontend.DeleteFrontendHandler
	// HTTPRequestRuleDeleteHTTPRequestRuleHandler sets the operation handler for the delete HTTP request rule operation
	HTTPRequestRuleDeleteHTTPRequestRuleHandler http_request_rule.DeleteHTTPRequestRuleHandler
	// HTTPResponseRuleDeleteHTTPResponseRuleHandler sets the operation handler for the delete HTTP response rule operation
	HTTPResponseRuleDeleteHTTPResponseRuleHandler http_response_rule.DeleteHTTPResponseRuleHandler
	// ListenerDeleteListenerHandler sets the operation handler for the delete listener operation
	ListenerDeleteListenerHandler listener.DeleteListenerHandler
	// ServerDeleteServerHandler sets the operation handler for the delete server operation
	ServerDeleteServerHandler server.DeleteServerHandler
	// ServerSwitchingRuleDeleteServerSwitchingRuleHandler sets the operation handler for the delete server switching rule operation
	ServerSwitchingRuleDeleteServerSwitchingRuleHandler server_switching_rule.DeleteServerSwitchingRuleHandler
	// SitesDeleteSiteHandler sets the operation handler for the delete site operation
	SitesDeleteSiteHandler sites.DeleteSiteHandler
	// StickRequestRuleDeleteStickRequestRuleHandler sets the operation handler for the delete stick request rule operation
	StickRequestRuleDeleteStickRequestRuleHandler stick_request_rule.DeleteStickRequestRuleHandler
	// StickResponseRuleDeleteStickResponseRuleHandler sets the operation handler for the delete stick response rule operation
	StickResponseRuleDeleteStickResponseRuleHandler stick_response_rule.DeleteStickResponseRuleHandler
	// TCPConnectionRuleDeleteTCPConnectionRuleHandler sets the operation handler for the delete TCP connection rule operation
	TCPConnectionRuleDeleteTCPConnectionRuleHandler tcp_connection_rule.DeleteTCPConnectionRuleHandler
	// TCPContentRuleDeleteTCPContentRuleHandler sets the operation handler for the delete TCP content rule operation
	TCPContentRuleDeleteTCPContentRuleHandler tcp_content_rule.DeleteTCPContentRuleHandler
	// TransactionsDeleteTransactionHandler sets the operation handler for the delete transaction operation
	TransactionsDeleteTransactionHandler transactions.DeleteTransactionHandler
	// DiscoveryGetAPIEndpointsHandler sets the operation handler for the get API endpoints operation
	DiscoveryGetAPIEndpointsHandler discovery.GetAPIEndpointsHandler
	// BackendGetBackendHandler sets the operation handler for the get backend operation
	BackendGetBackendHandler backend.GetBackendHandler
	// BackendSwitchingRuleGetBackendSwitchingRuleHandler sets the operation handler for the get backend switching rule operation
	BackendSwitchingRuleGetBackendSwitchingRuleHandler backend_switching_rule.GetBackendSwitchingRuleHandler
	// BackendSwitchingRuleGetBackendSwitchingRulesHandler sets the operation handler for the get backend switching rules operation
	BackendSwitchingRuleGetBackendSwitchingRulesHandler backend_switching_rule.GetBackendSwitchingRulesHandler
	// BackendGetBackendsHandler sets the operation handler for the get backends operation
	BackendGetBackendsHandler backend.GetBackendsHandler
	// DiscoveryGetConfigurationEndpointsHandler sets the operation handler for the get configuration endpoints operation
	DiscoveryGetConfigurationEndpointsHandler discovery.GetConfigurationEndpointsHandler
	// FilterGetFilterHandler sets the operation handler for the get filter operation
	FilterGetFilterHandler filter.GetFilterHandler
	// FilterGetFiltersHandler sets the operation handler for the get filters operation
	FilterGetFiltersHandler filter.GetFiltersHandler
	// FrontendGetFrontendHandler sets the operation handler for the get frontend operation
	FrontendGetFrontendHandler frontend.GetFrontendHandler
	// FrontendGetFrontendsHandler sets the operation handler for the get frontends operation
	FrontendGetFrontendsHandler frontend.GetFrontendsHandler
	// GlobalGetGlobalHandler sets the operation handler for the get global operation
	GlobalGetGlobalHandler global.GetGlobalHandler
	// ConfigurationGetHAProxyConfigurationHandler sets the operation handler for the get h a proxy configuration operation
	ConfigurationGetHAProxyConfigurationHandler configuration.GetHAProxyConfigurationHandler
	// HTTPRequestRuleGetHTTPRequestRuleHandler sets the operation handler for the get HTTP request rule operation
	HTTPRequestRuleGetHTTPRequestRuleHandler http_request_rule.GetHTTPRequestRuleHandler
	// HTTPRequestRuleGetHTTPRequestRulesHandler sets the operation handler for the get HTTP request rules operation
	HTTPRequestRuleGetHTTPRequestRulesHandler http_request_rule.GetHTTPRequestRulesHandler
	// HTTPResponseRuleGetHTTPResponseRuleHandler sets the operation handler for the get HTTP response rule operation
	HTTPResponseRuleGetHTTPResponseRuleHandler http_response_rule.GetHTTPResponseRuleHandler
	// HTTPResponseRuleGetHTTPResponseRulesHandler sets the operation handler for the get HTTP response rules operation
	HTTPResponseRuleGetHTTPResponseRulesHandler http_response_rule.GetHTTPResponseRulesHandler
	// DiscoveryGetHaproxyEndpointsHandler sets the operation handler for the get haproxy endpoints operation
	DiscoveryGetHaproxyEndpointsHandler discovery.GetHaproxyEndpointsHandler
	// InformationGetHaproxyProcessInfoHandler sets the operation handler for the get haproxy process info operation
	InformationGetHaproxyProcessInfoHandler information.GetHaproxyProcessInfoHandler
	// ListenerGetListenerHandler sets the operation handler for the get listener operation
	ListenerGetListenerHandler listener.GetListenerHandler
	// ListenerGetListenersHandler sets the operation handler for the get listeners operation
	ListenerGetListenersHandler listener.GetListenersHandler
	// ServerGetServerHandler sets the operation handler for the get server operation
	ServerGetServerHandler server.GetServerHandler
	// ServerSwitchingRuleGetServerSwitchingRuleHandler sets the operation handler for the get server switching rule operation
	ServerSwitchingRuleGetServerSwitchingRuleHandler server_switching_rule.GetServerSwitchingRuleHandler
	// ServerSwitchingRuleGetServerSwitchingRulesHandler sets the operation handler for the get server switching rules operation
	ServerSwitchingRuleGetServerSwitchingRulesHandler server_switching_rule.GetServerSwitchingRulesHandler
	// ServerGetServersHandler sets the operation handler for the get servers operation
	ServerGetServersHandler server.GetServersHandler
	// DiscoveryGetServicesEndpointsHandler sets the operation handler for the get services endpoints operation
	DiscoveryGetServicesEndpointsHandler discovery.GetServicesEndpointsHandler
	// SitesGetSiteHandler sets the operation handler for the get site operation
	SitesGetSiteHandler sites.GetSiteHandler
	// SitesGetSitesHandler sets the operation handler for the get sites operation
	SitesGetSitesHandler sites.GetSitesHandler
	// StatsGetStatsHandler sets the operation handler for the get stats operation
	StatsGetStatsHandler stats.GetStatsHandler
	// DiscoveryGetStatsEndpointsHandler sets the operation handler for the get stats endpoints operation
	DiscoveryGetStatsEndpointsHandler discovery.GetStatsEndpointsHandler
	// StickRequestRuleGetStickRequestRuleHandler sets the operation handler for the get stick request rule operation
	StickRequestRuleGetStickRequestRuleHandler stick_request_rule.GetStickRequestRuleHandler
	// StickRequestRuleGetStickRequestRulesHandler sets the operation handler for the get stick request rules operation
	StickRequestRuleGetStickRequestRulesHandler stick_request_rule.GetStickRequestRulesHandler
	// StickResponseRuleGetStickResponseRuleHandler sets the operation handler for the get stick response rule operation
	StickResponseRuleGetStickResponseRuleHandler stick_response_rule.GetStickResponseRuleHandler
	// StickResponseRuleGetStickResponseRulesHandler sets the operation handler for the get stick response rules operation
	StickResponseRuleGetStickResponseRulesHandler stick_response_rule.GetStickResponseRulesHandler
	// TCPConnectionRuleGetTCPConnectionRuleHandler sets the operation handler for the get TCP connection rule operation
	TCPConnectionRuleGetTCPConnectionRuleHandler tcp_connection_rule.GetTCPConnectionRuleHandler
	// TCPConnectionRuleGetTCPConnectionRulesHandler sets the operation handler for the get TCP connection rules operation
	TCPConnectionRuleGetTCPConnectionRulesHandler tcp_connection_rule.GetTCPConnectionRulesHandler
	// TCPContentRuleGetTCPContentRuleHandler sets the operation handler for the get TCP content rule operation
	TCPContentRuleGetTCPContentRuleHandler tcp_content_rule.GetTCPContentRuleHandler
	// TCPContentRuleGetTCPContentRulesHandler sets the operation handler for the get TCP content rules operation
	TCPContentRuleGetTCPContentRulesHandler tcp_content_rule.GetTCPContentRulesHandler
	// TransactionsGetTransactionHandler sets the operation handler for the get transaction operation
	TransactionsGetTransactionHandler transactions.GetTransactionHandler
	// TransactionsGetTransactionsHandler sets the operation handler for the get transactions operation
	TransactionsGetTransactionsHandler transactions.GetTransactionsHandler
	// ConfigurationPostHAProxyConfigurationHandler sets the operation handler for the post h a proxy configuration operation
	ConfigurationPostHAProxyConfigurationHandler configuration.PostHAProxyConfigurationHandler
	// BackendReplaceBackendHandler sets the operation handler for the replace backend operation
	BackendReplaceBackendHandler backend.ReplaceBackendHandler
	// BackendSwitchingRuleReplaceBackendSwitchingRuleHandler sets the operation handler for the replace backend switching rule operation
	BackendSwitchingRuleReplaceBackendSwitchingRuleHandler backend_switching_rule.ReplaceBackendSwitchingRuleHandler
	// FilterReplaceFilterHandler sets the operation handler for the replace filter operation
	FilterReplaceFilterHandler filter.ReplaceFilterHandler
	// FrontendReplaceFrontendHandler sets the operation handler for the replace frontend operation
	FrontendReplaceFrontendHandler frontend.ReplaceFrontendHandler
	// GlobalReplaceGlobalHandler sets the operation handler for the replace global operation
	GlobalReplaceGlobalHandler global.ReplaceGlobalHandler
	// HTTPRequestRuleReplaceHTTPRequestRuleHandler sets the operation handler for the replace HTTP request rule operation
	HTTPRequestRuleReplaceHTTPRequestRuleHandler http_request_rule.ReplaceHTTPRequestRuleHandler
	// HTTPResponseRuleReplaceHTTPResponseRuleHandler sets the operation handler for the replace HTTP response rule operation
	HTTPResponseRuleReplaceHTTPResponseRuleHandler http_response_rule.ReplaceHTTPResponseRuleHandler
	// ListenerReplaceListenerHandler sets the operation handler for the replace listener operation
	ListenerReplaceListenerHandler listener.ReplaceListenerHandler
	// ServerReplaceServerHandler sets the operation handler for the replace server operation
	ServerReplaceServerHandler server.ReplaceServerHandler
	// ServerSwitchingRuleReplaceServerSwitchingRuleHandler sets the operation handler for the replace server switching rule operation
	ServerSwitchingRuleReplaceServerSwitchingRuleHandler server_switching_rule.ReplaceServerSwitchingRuleHandler
	// SitesReplaceSiteHandler sets the operation handler for the replace site operation
	SitesReplaceSiteHandler sites.ReplaceSiteHandler
	// StickRequestRuleReplaceStickRequestRuleHandler sets the operation handler for the replace stick request rule operation
	StickRequestRuleReplaceStickRequestRuleHandler stick_request_rule.ReplaceStickRequestRuleHandler
	// StickResponseRuleReplaceStickResponseRuleHandler sets the operation handler for the replace stick response rule operation
	StickResponseRuleReplaceStickResponseRuleHandler stick_response_rule.ReplaceStickResponseRuleHandler
	// TCPConnectionRuleReplaceTCPConnectionRuleHandler sets the operation handler for the replace TCP connection rule operation
	TCPConnectionRuleReplaceTCPConnectionRuleHandler tcp_connection_rule.ReplaceTCPConnectionRuleHandler
	// TCPContentRuleReplaceTCPContentRuleHandler sets the operation handler for the replace TCP content rule operation
	TCPContentRuleReplaceTCPContentRuleHandler tcp_content_rule.ReplaceTCPContentRuleHandler
	// TransactionsStartTransactionHandler sets the operation handler for the start transaction operation
	TransactionsStartTransactionHandler transactions.StartTransactionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ControllerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ControllerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ControllerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ControllerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ControllerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ControllerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ControllerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ControllerAPI
func (o *ControllerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.TransactionsCommitTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.CommitTransactionHandler")
	}

	if o.BackendCreateBackendHandler == nil {
		unregistered = append(unregistered, "backend.CreateBackendHandler")
	}

	if o.BackendSwitchingRuleCreateBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.CreateBackendSwitchingRuleHandler")
	}

	if o.FilterCreateFilterHandler == nil {
		unregistered = append(unregistered, "filter.CreateFilterHandler")
	}

	if o.FrontendCreateFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.CreateFrontendHandler")
	}

	if o.HTTPRequestRuleCreateHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.CreateHTTPRequestRuleHandler")
	}

	if o.HTTPResponseRuleCreateHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.CreateHTTPResponseRuleHandler")
	}

	if o.ListenerCreateListenerHandler == nil {
		unregistered = append(unregistered, "listener.CreateListenerHandler")
	}

	if o.ServerCreateServerHandler == nil {
		unregistered = append(unregistered, "server.CreateServerHandler")
	}

	if o.ServerSwitchingRuleCreateServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.CreateServerSwitchingRuleHandler")
	}

	if o.SitesCreateSiteHandler == nil {
		unregistered = append(unregistered, "sites.CreateSiteHandler")
	}

	if o.StickRequestRuleCreateStickRequestRuleHandler == nil {
		unregistered = append(unregistered, "stick_request_rule.CreateStickRequestRuleHandler")
	}

	if o.StickResponseRuleCreateStickResponseRuleHandler == nil {
		unregistered = append(unregistered, "stick_response_rule.CreateStickResponseRuleHandler")
	}

	if o.TCPConnectionRuleCreateTCPConnectionRuleHandler == nil {
		unregistered = append(unregistered, "tcp_connection_rule.CreateTCPConnectionRuleHandler")
	}

	if o.TCPContentRuleCreateTCPContentRuleHandler == nil {
		unregistered = append(unregistered, "tcp_content_rule.CreateTCPContentRuleHandler")
	}

	if o.BackendDeleteBackendHandler == nil {
		unregistered = append(unregistered, "backend.DeleteBackendHandler")
	}

	if o.BackendSwitchingRuleDeleteBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.DeleteBackendSwitchingRuleHandler")
	}

	if o.FilterDeleteFilterHandler == nil {
		unregistered = append(unregistered, "filter.DeleteFilterHandler")
	}

	if o.FrontendDeleteFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.DeleteFrontendHandler")
	}

	if o.HTTPRequestRuleDeleteHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.DeleteHTTPRequestRuleHandler")
	}

	if o.HTTPResponseRuleDeleteHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.DeleteHTTPResponseRuleHandler")
	}

	if o.ListenerDeleteListenerHandler == nil {
		unregistered = append(unregistered, "listener.DeleteListenerHandler")
	}

	if o.ServerDeleteServerHandler == nil {
		unregistered = append(unregistered, "server.DeleteServerHandler")
	}

	if o.ServerSwitchingRuleDeleteServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.DeleteServerSwitchingRuleHandler")
	}

	if o.SitesDeleteSiteHandler == nil {
		unregistered = append(unregistered, "sites.DeleteSiteHandler")
	}

	if o.StickRequestRuleDeleteStickRequestRuleHandler == nil {
		unregistered = append(unregistered, "stick_request_rule.DeleteStickRequestRuleHandler")
	}

	if o.StickResponseRuleDeleteStickResponseRuleHandler == nil {
		unregistered = append(unregistered, "stick_response_rule.DeleteStickResponseRuleHandler")
	}

	if o.TCPConnectionRuleDeleteTCPConnectionRuleHandler == nil {
		unregistered = append(unregistered, "tcp_connection_rule.DeleteTCPConnectionRuleHandler")
	}

	if o.TCPContentRuleDeleteTCPContentRuleHandler == nil {
		unregistered = append(unregistered, "tcp_content_rule.DeleteTCPContentRuleHandler")
	}

	if o.TransactionsDeleteTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.DeleteTransactionHandler")
	}

	if o.DiscoveryGetAPIEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetAPIEndpointsHandler")
	}

	if o.BackendGetBackendHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendHandler")
	}

	if o.BackendSwitchingRuleGetBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.GetBackendSwitchingRuleHandler")
	}

	if o.BackendSwitchingRuleGetBackendSwitchingRulesHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.GetBackendSwitchingRulesHandler")
	}

	if o.BackendGetBackendsHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendsHandler")
	}

	if o.DiscoveryGetConfigurationEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetConfigurationEndpointsHandler")
	}

	if o.FilterGetFilterHandler == nil {
		unregistered = append(unregistered, "filter.GetFilterHandler")
	}

	if o.FilterGetFiltersHandler == nil {
		unregistered = append(unregistered, "filter.GetFiltersHandler")
	}

	if o.FrontendGetFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.GetFrontendHandler")
	}

	if o.FrontendGetFrontendsHandler == nil {
		unregistered = append(unregistered, "frontend.GetFrontendsHandler")
	}

	if o.GlobalGetGlobalHandler == nil {
		unregistered = append(unregistered, "global.GetGlobalHandler")
	}

	if o.ConfigurationGetHAProxyConfigurationHandler == nil {
		unregistered = append(unregistered, "configuration.GetHAProxyConfigurationHandler")
	}

	if o.HTTPRequestRuleGetHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.GetHTTPRequestRuleHandler")
	}

	if o.HTTPRequestRuleGetHTTPRequestRulesHandler == nil {
		unregistered = append(unregistered, "http_request_rule.GetHTTPRequestRulesHandler")
	}

	if o.HTTPResponseRuleGetHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.GetHTTPResponseRuleHandler")
	}

	if o.HTTPResponseRuleGetHTTPResponseRulesHandler == nil {
		unregistered = append(unregistered, "http_response_rule.GetHTTPResponseRulesHandler")
	}

	if o.DiscoveryGetHaproxyEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetHaproxyEndpointsHandler")
	}

	if o.InformationGetHaproxyProcessInfoHandler == nil {
		unregistered = append(unregistered, "information.GetHaproxyProcessInfoHandler")
	}

	if o.ListenerGetListenerHandler == nil {
		unregistered = append(unregistered, "listener.GetListenerHandler")
	}

	if o.ListenerGetListenersHandler == nil {
		unregistered = append(unregistered, "listener.GetListenersHandler")
	}

	if o.ServerGetServerHandler == nil {
		unregistered = append(unregistered, "server.GetServerHandler")
	}

	if o.ServerSwitchingRuleGetServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.GetServerSwitchingRuleHandler")
	}

	if o.ServerSwitchingRuleGetServerSwitchingRulesHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.GetServerSwitchingRulesHandler")
	}

	if o.ServerGetServersHandler == nil {
		unregistered = append(unregistered, "server.GetServersHandler")
	}

	if o.DiscoveryGetServicesEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetServicesEndpointsHandler")
	}

	if o.SitesGetSiteHandler == nil {
		unregistered = append(unregistered, "sites.GetSiteHandler")
	}

	if o.SitesGetSitesHandler == nil {
		unregistered = append(unregistered, "sites.GetSitesHandler")
	}

	if o.StatsGetStatsHandler == nil {
		unregistered = append(unregistered, "stats.GetStatsHandler")
	}

	if o.DiscoveryGetStatsEndpointsHandler == nil {
		unregistered = append(unregistered, "discovery.GetStatsEndpointsHandler")
	}

	if o.StickRequestRuleGetStickRequestRuleHandler == nil {
		unregistered = append(unregistered, "stick_request_rule.GetStickRequestRuleHandler")
	}

	if o.StickRequestRuleGetStickRequestRulesHandler == nil {
		unregistered = append(unregistered, "stick_request_rule.GetStickRequestRulesHandler")
	}

	if o.StickResponseRuleGetStickResponseRuleHandler == nil {
		unregistered = append(unregistered, "stick_response_rule.GetStickResponseRuleHandler")
	}

	if o.StickResponseRuleGetStickResponseRulesHandler == nil {
		unregistered = append(unregistered, "stick_response_rule.GetStickResponseRulesHandler")
	}

	if o.TCPConnectionRuleGetTCPConnectionRuleHandler == nil {
		unregistered = append(unregistered, "tcp_connection_rule.GetTCPConnectionRuleHandler")
	}

	if o.TCPConnectionRuleGetTCPConnectionRulesHandler == nil {
		unregistered = append(unregistered, "tcp_connection_rule.GetTCPConnectionRulesHandler")
	}

	if o.TCPContentRuleGetTCPContentRuleHandler == nil {
		unregistered = append(unregistered, "tcp_content_rule.GetTCPContentRuleHandler")
	}

	if o.TCPContentRuleGetTCPContentRulesHandler == nil {
		unregistered = append(unregistered, "tcp_content_rule.GetTCPContentRulesHandler")
	}

	if o.TransactionsGetTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.GetTransactionHandler")
	}

	if o.TransactionsGetTransactionsHandler == nil {
		unregistered = append(unregistered, "transactions.GetTransactionsHandler")
	}

	if o.ConfigurationPostHAProxyConfigurationHandler == nil {
		unregistered = append(unregistered, "configuration.PostHAProxyConfigurationHandler")
	}

	if o.BackendReplaceBackendHandler == nil {
		unregistered = append(unregistered, "backend.ReplaceBackendHandler")
	}

	if o.BackendSwitchingRuleReplaceBackendSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "backend_switching_rule.ReplaceBackendSwitchingRuleHandler")
	}

	if o.FilterReplaceFilterHandler == nil {
		unregistered = append(unregistered, "filter.ReplaceFilterHandler")
	}

	if o.FrontendReplaceFrontendHandler == nil {
		unregistered = append(unregistered, "frontend.ReplaceFrontendHandler")
	}

	if o.GlobalReplaceGlobalHandler == nil {
		unregistered = append(unregistered, "global.ReplaceGlobalHandler")
	}

	if o.HTTPRequestRuleReplaceHTTPRequestRuleHandler == nil {
		unregistered = append(unregistered, "http_request_rule.ReplaceHTTPRequestRuleHandler")
	}

	if o.HTTPResponseRuleReplaceHTTPResponseRuleHandler == nil {
		unregistered = append(unregistered, "http_response_rule.ReplaceHTTPResponseRuleHandler")
	}

	if o.ListenerReplaceListenerHandler == nil {
		unregistered = append(unregistered, "listener.ReplaceListenerHandler")
	}

	if o.ServerReplaceServerHandler == nil {
		unregistered = append(unregistered, "server.ReplaceServerHandler")
	}

	if o.ServerSwitchingRuleReplaceServerSwitchingRuleHandler == nil {
		unregistered = append(unregistered, "server_switching_rule.ReplaceServerSwitchingRuleHandler")
	}

	if o.SitesReplaceSiteHandler == nil {
		unregistered = append(unregistered, "sites.ReplaceSiteHandler")
	}

	if o.StickRequestRuleReplaceStickRequestRuleHandler == nil {
		unregistered = append(unregistered, "stick_request_rule.ReplaceStickRequestRuleHandler")
	}

	if o.StickResponseRuleReplaceStickResponseRuleHandler == nil {
		unregistered = append(unregistered, "stick_response_rule.ReplaceStickResponseRuleHandler")
	}

	if o.TCPConnectionRuleReplaceTCPConnectionRuleHandler == nil {
		unregistered = append(unregistered, "tcp_connection_rule.ReplaceTCPConnectionRuleHandler")
	}

	if o.TCPContentRuleReplaceTCPContentRuleHandler == nil {
		unregistered = append(unregistered, "tcp_content_rule.ReplaceTCPContentRuleHandler")
	}

	if o.TransactionsStartTransactionHandler == nil {
		unregistered = append(unregistered, "transactions.StartTransactionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ControllerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ControllerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "basic_auth":
			_ = scheme
			result[name] = o.BasicAuthenticator(o.BasicAuthAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *ControllerAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *ControllerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "text/plain":
			result["text/plain"] = o.TxtConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ControllerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ControllerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the controller API
func (o *ControllerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ControllerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/transactions/{id}"] = transactions.NewCommitTransaction(o.context, o.TransactionsCommitTransactionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/backends"] = backend.NewCreateBackend(o.context, o.BackendCreateBackendHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/backend_switching_rules"] = backend_switching_rule.NewCreateBackendSwitchingRule(o.context, o.BackendSwitchingRuleCreateBackendSwitchingRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/filters"] = filter.NewCreateFilter(o.context, o.FilterCreateFilterHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/frontends"] = frontend.NewCreateFrontend(o.context, o.FrontendCreateFrontendHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_request_rules"] = http_request_rule.NewCreateHTTPRequestRule(o.context, o.HTTPRequestRuleCreateHTTPRequestRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/http_response_rules"] = http_response_rule.NewCreateHTTPResponseRule(o.context, o.HTTPResponseRuleCreateHTTPResponseRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/listeners"] = listener.NewCreateListener(o.context, o.ListenerCreateListenerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/servers"] = server.NewCreateServer(o.context, o.ServerCreateServerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/server_switching_rules"] = server_switching_rule.NewCreateServerSwitchingRule(o.context, o.ServerSwitchingRuleCreateServerSwitchingRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/sites"] = sites.NewCreateSite(o.context, o.SitesCreateSiteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/stick_request_rules"] = stick_request_rule.NewCreateStickRequestRule(o.context, o.StickRequestRuleCreateStickRequestRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/stick_response_rules"] = stick_response_rule.NewCreateStickResponseRule(o.context, o.StickResponseRuleCreateStickResponseRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/tcp_connection_rules"] = tcp_connection_rule.NewCreateTCPConnectionRule(o.context, o.TCPConnectionRuleCreateTCPConnectionRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/tcp_content_rules"] = tcp_content_rule.NewCreateTCPContentRule(o.context, o.TCPContentRuleCreateTCPContentRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/backends/{name}"] = backend.NewDeleteBackend(o.context, o.BackendDeleteBackendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/backend_switching_rules/{id}"] = backend_switching_rule.NewDeleteBackendSwitchingRule(o.context, o.BackendSwitchingRuleDeleteBackendSwitchingRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/filters/{id}"] = filter.NewDeleteFilter(o.context, o.FilterDeleteFilterHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/frontends/{name}"] = frontend.NewDeleteFrontend(o.context, o.FrontendDeleteFrontendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_request_rules/{id}"] = http_request_rule.NewDeleteHTTPRequestRule(o.context, o.HTTPRequestRuleDeleteHTTPRequestRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/http_response_rules/{id}"] = http_response_rule.NewDeleteHTTPResponseRule(o.context, o.HTTPResponseRuleDeleteHTTPResponseRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/listeners/{name}"] = listener.NewDeleteListener(o.context, o.ListenerDeleteListenerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/servers/{name}"] = server.NewDeleteServer(o.context, o.ServerDeleteServerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/server_switching_rules/{id}"] = server_switching_rule.NewDeleteServerSwitchingRule(o.context, o.ServerSwitchingRuleDeleteServerSwitchingRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/sites/{name}"] = sites.NewDeleteSite(o.context, o.SitesDeleteSiteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/stick_request_rules/{id}"] = stick_request_rule.NewDeleteStickRequestRule(o.context, o.StickRequestRuleDeleteStickRequestRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/stick_response_rules/{id}"] = stick_response_rule.NewDeleteStickResponseRule(o.context, o.StickResponseRuleDeleteStickResponseRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/tcp_connection_rules/{id}"] = tcp_connection_rule.NewDeleteTCPConnectionRule(o.context, o.TCPConnectionRuleDeleteTCPConnectionRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/configuration/tcp_content_rules/{id}"] = tcp_content_rule.NewDeleteTCPContentRule(o.context, o.TCPContentRuleDeleteTCPContentRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/haproxy/transactions/{id}"] = transactions.NewDeleteTransaction(o.context, o.TransactionsDeleteTransactionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = discovery.NewGetAPIEndpoints(o.context, o.DiscoveryGetAPIEndpointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backends/{name}"] = backend.NewGetBackend(o.context, o.BackendGetBackendHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backend_switching_rules/{id}"] = backend_switching_rule.NewGetBackendSwitchingRule(o.context, o.BackendSwitchingRuleGetBackendSwitchingRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backend_switching_rules"] = backend_switching_rule.NewGetBackendSwitchingRules(o.context, o.BackendSwitchingRuleGetBackendSwitchingRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/backends"] = backend.NewGetBackends(o.context, o.BackendGetBackendsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration"] = discovery.NewGetConfigurationEndpoints(o.context, o.DiscoveryGetConfigurationEndpointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/filters/{id}"] = filter.NewGetFilter(o.context, o.FilterGetFilterHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/filters"] = filter.NewGetFilters(o.context, o.FilterGetFiltersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/frontends/{name}"] = frontend.NewGetFrontend(o.context, o.FrontendGetFrontendHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/frontends"] = frontend.NewGetFrontends(o.context, o.FrontendGetFrontendsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/global"] = global.NewGetGlobal(o.context, o.GlobalGetGlobalHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/raw"] = configuration.NewGetHAProxyConfiguration(o.context, o.ConfigurationGetHAProxyConfigurationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_request_rules/{id}"] = http_request_rule.NewGetHTTPRequestRule(o.context, o.HTTPRequestRuleGetHTTPRequestRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_request_rules"] = http_request_rule.NewGetHTTPRequestRules(o.context, o.HTTPRequestRuleGetHTTPRequestRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_response_rules/{id}"] = http_response_rule.NewGetHTTPResponseRule(o.context, o.HTTPResponseRuleGetHTTPResponseRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/http_response_rules"] = http_response_rule.NewGetHTTPResponseRules(o.context, o.HTTPResponseRuleGetHTTPResponseRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy"] = discovery.NewGetHaproxyEndpoints(o.context, o.DiscoveryGetHaproxyEndpointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/info"] = information.NewGetHaproxyProcessInfo(o.context, o.InformationGetHaproxyProcessInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/listeners/{name}"] = listener.NewGetListener(o.context, o.ListenerGetListenerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/listeners"] = listener.NewGetListeners(o.context, o.ListenerGetListenersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/servers/{name}"] = server.NewGetServer(o.context, o.ServerGetServerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/server_switching_rules/{id}"] = server_switching_rule.NewGetServerSwitchingRule(o.context, o.ServerSwitchingRuleGetServerSwitchingRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/server_switching_rules"] = server_switching_rule.NewGetServerSwitchingRules(o.context, o.ServerSwitchingRuleGetServerSwitchingRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/servers"] = server.NewGetServers(o.context, o.ServerGetServersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services"] = discovery.NewGetServicesEndpoints(o.context, o.DiscoveryGetServicesEndpointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/sites/{name}"] = sites.NewGetSite(o.context, o.SitesGetSiteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/sites"] = sites.NewGetSites(o.context, o.SitesGetSitesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/stats/native"] = stats.NewGetStats(o.context, o.StatsGetStatsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/stats"] = discovery.NewGetStatsEndpoints(o.context, o.DiscoveryGetStatsEndpointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/stick_request_rules/{id}"] = stick_request_rule.NewGetStickRequestRule(o.context, o.StickRequestRuleGetStickRequestRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/stick_request_rules"] = stick_request_rule.NewGetStickRequestRules(o.context, o.StickRequestRuleGetStickRequestRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/stick_response_rules/{id}"] = stick_response_rule.NewGetStickResponseRule(o.context, o.StickResponseRuleGetStickResponseRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/stick_response_rules"] = stick_response_rule.NewGetStickResponseRules(o.context, o.StickResponseRuleGetStickResponseRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_connection_rules/{id}"] = tcp_connection_rule.NewGetTCPConnectionRule(o.context, o.TCPConnectionRuleGetTCPConnectionRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_connection_rules"] = tcp_connection_rule.NewGetTCPConnectionRules(o.context, o.TCPConnectionRuleGetTCPConnectionRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_content_rules/{id}"] = tcp_content_rule.NewGetTCPContentRule(o.context, o.TCPContentRuleGetTCPContentRuleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/configuration/tcp_content_rules"] = tcp_content_rule.NewGetTCPContentRules(o.context, o.TCPContentRuleGetTCPContentRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/transactions/{id}"] = transactions.NewGetTransaction(o.context, o.TransactionsGetTransactionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/haproxy/transactions"] = transactions.NewGetTransactions(o.context, o.TransactionsGetTransactionsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/configuration/raw"] = configuration.NewPostHAProxyConfiguration(o.context, o.ConfigurationPostHAProxyConfigurationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/backends/{name}"] = backend.NewReplaceBackend(o.context, o.BackendReplaceBackendHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/backend_switching_rules/{id}"] = backend_switching_rule.NewReplaceBackendSwitchingRule(o.context, o.BackendSwitchingRuleReplaceBackendSwitchingRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/filters/{id}"] = filter.NewReplaceFilter(o.context, o.FilterReplaceFilterHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/frontends/{name}"] = frontend.NewReplaceFrontend(o.context, o.FrontendReplaceFrontendHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/global"] = global.NewReplaceGlobal(o.context, o.GlobalReplaceGlobalHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_request_rules/{id}"] = http_request_rule.NewReplaceHTTPRequestRule(o.context, o.HTTPRequestRuleReplaceHTTPRequestRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/http_response_rules/{id}"] = http_response_rule.NewReplaceHTTPResponseRule(o.context, o.HTTPResponseRuleReplaceHTTPResponseRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/listeners/{name}"] = listener.NewReplaceListener(o.context, o.ListenerReplaceListenerHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/servers/{name}"] = server.NewReplaceServer(o.context, o.ServerReplaceServerHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/server_switching_rules/{id}"] = server_switching_rule.NewReplaceServerSwitchingRule(o.context, o.ServerSwitchingRuleReplaceServerSwitchingRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/sites/{name}"] = sites.NewReplaceSite(o.context, o.SitesReplaceSiteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/stick_request_rules/{id}"] = stick_request_rule.NewReplaceStickRequestRule(o.context, o.StickRequestRuleReplaceStickRequestRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/stick_response_rules/{id}"] = stick_response_rule.NewReplaceStickResponseRule(o.context, o.StickResponseRuleReplaceStickResponseRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/tcp_connection_rules/{id}"] = tcp_connection_rule.NewReplaceTCPConnectionRule(o.context, o.TCPConnectionRuleReplaceTCPConnectionRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services/haproxy/configuration/tcp_content_rules/{id}"] = tcp_content_rule.NewReplaceTCPContentRule(o.context, o.TCPContentRuleReplaceTCPContentRuleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/haproxy/transactions"] = transactions.NewStartTransaction(o.context, o.TransactionsStartTransactionHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ControllerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ControllerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ControllerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ControllerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
