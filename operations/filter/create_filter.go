// Code generated by go-swagger; DO NOT EDIT.

package filter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateFilterHandlerFunc turns a function with the right signature into a create filter handler
type CreateFilterHandlerFunc func(CreateFilterParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateFilterHandlerFunc) Handle(params CreateFilterParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateFilterHandler interface for that can handle valid create filter params
type CreateFilterHandler interface {
	Handle(CreateFilterParams, interface{}) middleware.Responder
}

// NewCreateFilter creates a new http.Handler for the create filter operation
func NewCreateFilter(ctx *middleware.Context, handler CreateFilterHandler) *CreateFilter {
	return &CreateFilter{Context: ctx, Handler: handler}
}

/*CreateFilter swagger:route POST /services/haproxy/configuration/filters Filter createFilter

Add a new Filter

Adds a new Filter of the specified type in the specified parent.

*/
type CreateFilter struct {
	Context *middleware.Context
	Handler CreateFilterHandler
}

func (o *CreateFilter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateFilterParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
