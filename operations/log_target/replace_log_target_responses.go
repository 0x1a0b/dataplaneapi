// Code generated by go-swagger; DO NOT EDIT.

package log_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// ReplaceLogTargetOKCode is the HTTP code returned for type ReplaceLogTargetOK
const ReplaceLogTargetOKCode int = 200

/*ReplaceLogTargetOK Log Target replaced

swagger:response replaceLogTargetOK
*/
type ReplaceLogTargetOK struct {

	/*
	  In: Body
	*/
	Payload *models.LogTarget `json:"body,omitempty"`
}

// NewReplaceLogTargetOK creates ReplaceLogTargetOK with default headers values
func NewReplaceLogTargetOK() *ReplaceLogTargetOK {

	return &ReplaceLogTargetOK{}
}

// WithPayload adds the payload to the replace log target o k response
func (o *ReplaceLogTargetOK) WithPayload(payload *models.LogTarget) *ReplaceLogTargetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace log target o k response
func (o *ReplaceLogTargetOK) SetPayload(payload *models.LogTarget) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceLogTargetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceLogTargetBadRequestCode is the HTTP code returned for type ReplaceLogTargetBadRequest
const ReplaceLogTargetBadRequestCode int = 400

/*ReplaceLogTargetBadRequest Bad request

swagger:response replaceLogTargetBadRequest
*/
type ReplaceLogTargetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceLogTargetBadRequest creates ReplaceLogTargetBadRequest with default headers values
func NewReplaceLogTargetBadRequest() *ReplaceLogTargetBadRequest {

	return &ReplaceLogTargetBadRequest{}
}

// WithPayload adds the payload to the replace log target bad request response
func (o *ReplaceLogTargetBadRequest) WithPayload(payload *models.Error) *ReplaceLogTargetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace log target bad request response
func (o *ReplaceLogTargetBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceLogTargetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceLogTargetNotFoundCode is the HTTP code returned for type ReplaceLogTargetNotFound
const ReplaceLogTargetNotFoundCode int = 404

/*ReplaceLogTargetNotFound The specified resource was not found

swagger:response replaceLogTargetNotFound
*/
type ReplaceLogTargetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceLogTargetNotFound creates ReplaceLogTargetNotFound with default headers values
func NewReplaceLogTargetNotFound() *ReplaceLogTargetNotFound {

	return &ReplaceLogTargetNotFound{}
}

// WithPayload adds the payload to the replace log target not found response
func (o *ReplaceLogTargetNotFound) WithPayload(payload *models.Error) *ReplaceLogTargetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace log target not found response
func (o *ReplaceLogTargetNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceLogTargetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ReplaceLogTargetDefault General Error

swagger:response replaceLogTargetDefault
*/
type ReplaceLogTargetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceLogTargetDefault creates ReplaceLogTargetDefault with default headers values
func NewReplaceLogTargetDefault(code int) *ReplaceLogTargetDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceLogTargetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace log target default response
func (o *ReplaceLogTargetDefault) WithStatusCode(code int) *ReplaceLogTargetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace log target default response
func (o *ReplaceLogTargetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the replace log target default response
func (o *ReplaceLogTargetDefault) WithPayload(payload *models.Error) *ReplaceLogTargetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace log target default response
func (o *ReplaceLogTargetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceLogTargetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
