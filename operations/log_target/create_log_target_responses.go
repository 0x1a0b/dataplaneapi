// Code generated by go-swagger; DO NOT EDIT.

package log_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// CreateLogTargetCreatedCode is the HTTP code returned for type CreateLogTargetCreated
const CreateLogTargetCreatedCode int = 201

/*CreateLogTargetCreated Log Target created

swagger:response createLogTargetCreated
*/
type CreateLogTargetCreated struct {

	/*
	  In: Body
	*/
	Payload *models.LogTarget `json:"body,omitempty"`
}

// NewCreateLogTargetCreated creates CreateLogTargetCreated with default headers values
func NewCreateLogTargetCreated() *CreateLogTargetCreated {

	return &CreateLogTargetCreated{}
}

// WithPayload adds the payload to the create log target created response
func (o *CreateLogTargetCreated) WithPayload(payload *models.LogTarget) *CreateLogTargetCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create log target created response
func (o *CreateLogTargetCreated) SetPayload(payload *models.LogTarget) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLogTargetCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLogTargetBadRequestCode is the HTTP code returned for type CreateLogTargetBadRequest
const CreateLogTargetBadRequestCode int = 400

/*CreateLogTargetBadRequest Bad request

swagger:response createLogTargetBadRequest
*/
type CreateLogTargetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateLogTargetBadRequest creates CreateLogTargetBadRequest with default headers values
func NewCreateLogTargetBadRequest() *CreateLogTargetBadRequest {

	return &CreateLogTargetBadRequest{}
}

// WithPayload adds the payload to the create log target bad request response
func (o *CreateLogTargetBadRequest) WithPayload(payload *models.Error) *CreateLogTargetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create log target bad request response
func (o *CreateLogTargetBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLogTargetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLogTargetConflictCode is the HTTP code returned for type CreateLogTargetConflict
const CreateLogTargetConflictCode int = 409

/*CreateLogTargetConflict The specified resource already exists

swagger:response createLogTargetConflict
*/
type CreateLogTargetConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateLogTargetConflict creates CreateLogTargetConflict with default headers values
func NewCreateLogTargetConflict() *CreateLogTargetConflict {

	return &CreateLogTargetConflict{}
}

// WithPayload adds the payload to the create log target conflict response
func (o *CreateLogTargetConflict) WithPayload(payload *models.Error) *CreateLogTargetConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create log target conflict response
func (o *CreateLogTargetConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLogTargetConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateLogTargetDefault General Error

swagger:response createLogTargetDefault
*/
type CreateLogTargetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateLogTargetDefault creates CreateLogTargetDefault with default headers values
func NewCreateLogTargetDefault(code int) *CreateLogTargetDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateLogTargetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create log target default response
func (o *CreateLogTargetDefault) WithStatusCode(code int) *CreateLogTargetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create log target default response
func (o *CreateLogTargetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create log target default response
func (o *CreateLogTargetDefault) WithPayload(payload *models.Error) *CreateLogTargetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create log target default response
func (o *CreateLogTargetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLogTargetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
