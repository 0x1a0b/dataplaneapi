// Code generated by go-swagger; DO NOT EDIT.

package stick_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetStickResponseRuleOKCode is the HTTP code returned for type GetStickResponseRuleOK
const GetStickResponseRuleOKCode int = 200

/*GetStickResponseRuleOK Successful operation

swagger:response getStickResponseRuleOK
*/
type GetStickResponseRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetStickResponseRuleOKBody `json:"body,omitempty"`
}

// NewGetStickResponseRuleOK creates GetStickResponseRuleOK with default headers values
func NewGetStickResponseRuleOK() *GetStickResponseRuleOK {

	return &GetStickResponseRuleOK{}
}

// WithPayload adds the payload to the get stick response rule o k response
func (o *GetStickResponseRuleOK) WithPayload(payload *models.GetStickResponseRuleOKBody) *GetStickResponseRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get stick response rule o k response
func (o *GetStickResponseRuleOK) SetPayload(payload *models.GetStickResponseRuleOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStickResponseRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetStickResponseRuleNotFoundCode is the HTTP code returned for type GetStickResponseRuleNotFound
const GetStickResponseRuleNotFoundCode int = 404

/*GetStickResponseRuleNotFound The specified resource was not found

swagger:response getStickResponseRuleNotFound
*/
type GetStickResponseRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetStickResponseRuleNotFound creates GetStickResponseRuleNotFound with default headers values
func NewGetStickResponseRuleNotFound() *GetStickResponseRuleNotFound {

	return &GetStickResponseRuleNotFound{}
}

// WithPayload adds the payload to the get stick response rule not found response
func (o *GetStickResponseRuleNotFound) WithPayload(payload *models.Error) *GetStickResponseRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get stick response rule not found response
func (o *GetStickResponseRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStickResponseRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetStickResponseRuleDefault General Error

swagger:response getStickResponseRuleDefault
*/
type GetStickResponseRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetStickResponseRuleDefault creates GetStickResponseRuleDefault with default headers values
func NewGetStickResponseRuleDefault(code int) *GetStickResponseRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &GetStickResponseRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get stick response rule default response
func (o *GetStickResponseRuleDefault) WithStatusCode(code int) *GetStickResponseRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get stick response rule default response
func (o *GetStickResponseRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get stick response rule default response
func (o *GetStickResponseRuleDefault) WithPayload(payload *models.Error) *GetStickResponseRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get stick response rule default response
func (o *GetStickResponseRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStickResponseRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
