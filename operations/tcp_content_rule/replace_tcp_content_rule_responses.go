// Code generated by go-swagger; DO NOT EDIT.

package tcp_content_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// ReplaceTCPContentRuleOKCode is the HTTP code returned for type ReplaceTCPContentRuleOK
const ReplaceTCPContentRuleOKCode int = 200

/*ReplaceTCPContentRuleOK TCP Content Rule replaced

swagger:response replaceTcpContentRuleOK
*/
type ReplaceTCPContentRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.TCPRule `json:"body,omitempty"`
}

// NewReplaceTCPContentRuleOK creates ReplaceTCPContentRuleOK with default headers values
func NewReplaceTCPContentRuleOK() *ReplaceTCPContentRuleOK {

	return &ReplaceTCPContentRuleOK{}
}

// WithPayload adds the payload to the replace Tcp content rule o k response
func (o *ReplaceTCPContentRuleOK) WithPayload(payload *models.TCPRule) *ReplaceTCPContentRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp content rule o k response
func (o *ReplaceTCPContentRuleOK) SetPayload(payload *models.TCPRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPContentRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPContentRuleBadRequestCode is the HTTP code returned for type ReplaceTCPContentRuleBadRequest
const ReplaceTCPContentRuleBadRequestCode int = 400

/*ReplaceTCPContentRuleBadRequest Bad request

swagger:response replaceTcpContentRuleBadRequest
*/
type ReplaceTCPContentRuleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPContentRuleBadRequest creates ReplaceTCPContentRuleBadRequest with default headers values
func NewReplaceTCPContentRuleBadRequest() *ReplaceTCPContentRuleBadRequest {

	return &ReplaceTCPContentRuleBadRequest{}
}

// WithPayload adds the payload to the replace Tcp content rule bad request response
func (o *ReplaceTCPContentRuleBadRequest) WithPayload(payload *models.Error) *ReplaceTCPContentRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp content rule bad request response
func (o *ReplaceTCPContentRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPContentRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPContentRuleNotFoundCode is the HTTP code returned for type ReplaceTCPContentRuleNotFound
const ReplaceTCPContentRuleNotFoundCode int = 404

/*ReplaceTCPContentRuleNotFound The specified resource was not found

swagger:response replaceTcpContentRuleNotFound
*/
type ReplaceTCPContentRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPContentRuleNotFound creates ReplaceTCPContentRuleNotFound with default headers values
func NewReplaceTCPContentRuleNotFound() *ReplaceTCPContentRuleNotFound {

	return &ReplaceTCPContentRuleNotFound{}
}

// WithPayload adds the payload to the replace Tcp content rule not found response
func (o *ReplaceTCPContentRuleNotFound) WithPayload(payload *models.Error) *ReplaceTCPContentRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp content rule not found response
func (o *ReplaceTCPContentRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPContentRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ReplaceTCPContentRuleDefault General Error

swagger:response replaceTcpContentRuleDefault
*/
type ReplaceTCPContentRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPContentRuleDefault creates ReplaceTCPContentRuleDefault with default headers values
func NewReplaceTCPContentRuleDefault(code int) *ReplaceTCPContentRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPContentRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP content rule default response
func (o *ReplaceTCPContentRuleDefault) WithStatusCode(code int) *ReplaceTCPContentRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP content rule default response
func (o *ReplaceTCPContentRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the replace TCP content rule default response
func (o *ReplaceTCPContentRuleDefault) WithPayload(payload *models.Error) *ReplaceTCPContentRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP content rule default response
func (o *ReplaceTCPContentRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPContentRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
