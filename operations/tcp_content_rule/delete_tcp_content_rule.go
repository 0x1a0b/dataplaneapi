// Code generated by go-swagger; DO NOT EDIT.

package tcp_content_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTCPContentRuleHandlerFunc turns a function with the right signature into a delete TCP content rule handler
type DeleteTCPContentRuleHandlerFunc func(DeleteTCPContentRuleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTCPContentRuleHandlerFunc) Handle(params DeleteTCPContentRuleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteTCPContentRuleHandler interface for that can handle valid delete TCP content rule params
type DeleteTCPContentRuleHandler interface {
	Handle(DeleteTCPContentRuleParams, interface{}) middleware.Responder
}

// NewDeleteTCPContentRule creates a new http.Handler for the delete TCP content rule operation
func NewDeleteTCPContentRule(ctx *middleware.Context, handler DeleteTCPContentRuleHandler) *DeleteTCPContentRule {
	return &DeleteTCPContentRule{Context: ctx, Handler: handler}
}

/*DeleteTCPContentRule swagger:route DELETE /services/haproxy/configuration/tcp_content_rules/{id} TCPContentRule deleteTcpContentRule

Delete a TCP Content Rule

Deletes a TCP Content Rule configuration by it's ID from the specified parent.

*/
type DeleteTCPContentRule struct {
	Context *middleware.Context
	Handler DeleteTCPContentRuleHandler
}

func (o *DeleteTCPContentRule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTCPContentRuleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
