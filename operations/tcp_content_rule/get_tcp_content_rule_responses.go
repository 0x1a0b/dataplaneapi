// Code generated by go-swagger; DO NOT EDIT.

package tcp_content_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/models"
)

// GetTCPContentRuleOKCode is the HTTP code returned for type GetTCPContentRuleOK
const GetTCPContentRuleOKCode int = 200

/*GetTCPContentRuleOK Successful operation

swagger:response getTcpContentRuleOK
*/
type GetTCPContentRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetTCPContentRuleOKBody `json:"body,omitempty"`
}

// NewGetTCPContentRuleOK creates GetTCPContentRuleOK with default headers values
func NewGetTCPContentRuleOK() *GetTCPContentRuleOK {

	return &GetTCPContentRuleOK{}
}

// WithPayload adds the payload to the get Tcp content rule o k response
func (o *GetTCPContentRuleOK) WithPayload(payload *models.GetTCPContentRuleOKBody) *GetTCPContentRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Tcp content rule o k response
func (o *GetTCPContentRuleOK) SetPayload(payload *models.GetTCPContentRuleOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPContentRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTCPContentRuleNotFoundCode is the HTTP code returned for type GetTCPContentRuleNotFound
const GetTCPContentRuleNotFoundCode int = 404

/*GetTCPContentRuleNotFound The specified resource was not found

swagger:response getTcpContentRuleNotFound
*/
type GetTCPContentRuleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTCPContentRuleNotFound creates GetTCPContentRuleNotFound with default headers values
func NewGetTCPContentRuleNotFound() *GetTCPContentRuleNotFound {

	return &GetTCPContentRuleNotFound{}
}

// WithPayload adds the payload to the get Tcp content rule not found response
func (o *GetTCPContentRuleNotFound) WithPayload(payload *models.Error) *GetTCPContentRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Tcp content rule not found response
func (o *GetTCPContentRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPContentRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetTCPContentRuleDefault General Error

swagger:response getTcpContentRuleDefault
*/
type GetTCPContentRuleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTCPContentRuleDefault creates GetTCPContentRuleDefault with default headers values
func NewGetTCPContentRuleDefault(code int) *GetTCPContentRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &GetTCPContentRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get TCP content rule default response
func (o *GetTCPContentRuleDefault) WithStatusCode(code int) *GetTCPContentRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get TCP content rule default response
func (o *GetTCPContentRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get TCP content rule default response
func (o *GetTCPContentRuleDefault) WithPayload(payload *models.Error) *GetTCPContentRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get TCP content rule default response
func (o *GetTCPContentRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTCPContentRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
