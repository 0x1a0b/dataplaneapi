// Code generated by go-swagger; DO NOT EDIT.

package tcp_content_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTCPContentRulesHandlerFunc turns a function with the right signature into a get TCP content rules handler
type GetTCPContentRulesHandlerFunc func(GetTCPContentRulesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTCPContentRulesHandlerFunc) Handle(params GetTCPContentRulesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTCPContentRulesHandler interface for that can handle valid get TCP content rules params
type GetTCPContentRulesHandler interface {
	Handle(GetTCPContentRulesParams, interface{}) middleware.Responder
}

// NewGetTCPContentRules creates a new http.Handler for the get TCP content rules operation
func NewGetTCPContentRules(ctx *middleware.Context, handler GetTCPContentRulesHandler) *GetTCPContentRules {
	return &GetTCPContentRules{Context: ctx, Handler: handler}
}

/*GetTCPContentRules swagger:route GET /services/haproxy/configuration/tcp_content_rules TCPContentRule getTcpContentRules

Return an array of all TCP Content Rules

Returns all TCP Content Rules that are configured in specified parent and parent type. TCP Content Rules can be request rules or response rules if parent is backend, and only request if parent is frontend.

*/
type GetTCPContentRules struct {
	Context *middleware.Context
	Handler GetTCPContentRulesHandler
}

func (o *GetTCPContentRules) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTCPContentRulesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
